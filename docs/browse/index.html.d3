<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
  <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
  <link rel="stylesheet" href="/assets/css/styles.css?v=1741192169">
<link rel="stylesheet" href="/assets/css/map-style.css?v=1741192169">
<script src="/assets/js/jquery.min.js"></script>
<script src="/assets/js/functions.js"></script>

<script>
  !function (t, e) { var o, n, p, r; e.__SV || (window.posthog = e, e._i = [], e.init = function (i, s, a) { function g(t, e) { var o = e.split("."); 2 == o.length && (t = t[o[0]], e = o[1]), t[e] = function () { t.push([e].concat(Array.prototype.slice.call(arguments, 0))) } } (p = t.createElement("script")).type = "text/javascript", p.crossOrigin = "anonymous", p.async = !0, p.src = s.api_host.replace(".i.posthog.com", "-assets.i.posthog.com") + "/static/array.js", (r = t.getElementsByTagName("script")[0]).parentNode.insertBefore(p, r); var u = e; for (void 0 !== a ? u = e[a] = [] : a = "posthog", u.people = u.people || [], u.toString = function (t) { var e = "posthog"; return "posthog" !== a && (e += "." + a), t || (e += " (stub)"), e }, u.people.toString = function () { return u.toString(1) + ".people (stub)" }, o = "init capture register register_once register_for_session unregister unregister_for_session getFeatureFlag getFeatureFlagPayload isFeatureEnabled reloadFeatureFlags updateEarlyAccessFeatureEnrollment getEarlyAccessFeatures on onFeatureFlags onSessionId getSurveys getActiveMatchingSurveys renderSurvey canRenderSurvey getNextSurveyStep identify setPersonProperties group resetGroups setPersonPropertiesForFlags resetPersonPropertiesForFlags setGroupPropertiesForFlags resetGroupPropertiesForFlags reset get_distinct_id getGroups get_session_id get_session_replay_url alias set_config startSessionRecording stopSessionRecording sessionRecordingStarted captureException loadToolbar get_property getSessionProperty createPersonProfile opt_in_capturing opt_out_capturing has_opted_in_capturing has_opted_out_capturing clear_opt_in_out_capturing debug".split(" "), n = 0; n < o.length; n++)g(u, o[n]); e._i.push([i, s, a]) }, e.__SV = 1) }(document, window.posthog || []);
  posthog.init('phc_N9vMS3PvDUAEToLCWTi0eSS63fyVAxExArOHIz3kqGh', {
    api_host: 'https://ph.datarepublican.com/', person_profiles: 'identified_only'
  })
</script>

<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Libre+Franklin:ital,wght@0,100..900;1,100..900&display=swap"
  rel="stylesheet">

<link rel="icon" href="/assets/images/favicon.png" type="image/x-icon">
<link rel="shortcut icon" href="/assets/images/favicon.png" type="image/x-icon">
<link rel="manifest" href="">

<script>
$(document).ready(function() {
    if (window.location.hostname === "joeisdone.github.io") {
        const newUrl = window.location.href.replace("joeisdone.github.io", "datarepublican.com");
        window.location.href = newUrl;
    }
});
</script>

  <!-- Begin Jekyll SEO tag v2.8.0 -->
<title>People Relations (BETA) | DataRepublican</title>
<meta name="generator" content="Jekyll v3.9.5" />
<meta property="og:title" content="People Relations (BETA)" />
<meta property="og:locale" content="en_US" />
<meta name="description" content="Tracking where the money goes" />
<meta property="og:description" content="Tracking where the money goes" />
<link rel="canonical" href="https://datarepublican.com/relations/index.html.d3" />
<meta property="og:url" content="https://datarepublican.com/relations/index.html.d3" />
<meta property="og:site_name" content="DataRepublican" />
<meta property="og:image" content="https://datarepublican.com/assets/images/og-3-1.png" />
<meta property="og:type" content="website" />
<meta name="twitter:card" content="summary_large_image" />
<meta property="twitter:image" content="https://datarepublican.com/assets/images/og-3-1.png" />
<meta property="twitter:title" content="People Relations (BETA)" />
<script type="application/ld+json">
{"@context":"https://schema.org","@type":"WebPage","description":"Tracking where the money goes","headline":"People Relations (BETA)","image":"https://datarepublican.com/assets/images/og-3-1.png","url":"https://datarepublican.com/relations/index.html.d3"}</script>
<!-- End Jekyll SEO tag -->

</head>

<body class="m-0 p-0 flex flex-col md:flex-row">
  <header
  id="site-header"
>
  <script>
    // Check localStorage immediately to prevent flash of expanded menu
    (function() {
      var header = document.getElementById('site-header');
      var menuContents = document.getElementById('menu-contents');
      var mainContent = document.getElementById('main-content');
      var isCollapsed = localStorage.getItem('menuCollapsed') === 'true';
      
      // Only apply collapsed state if not on mobile
      if (isCollapsed && window.innerWidth >= 768) {
        header.classList.add('collapsed');
        if (menuContents) {
          menuContents.classList.add('hidden');
        }
        if (mainContent) {
          mainContent.classList.add('menu-collapsed');
        }
      }
    })();
  </script>

  
  <div id="expand-button-container" class="md:flex flex-col" style="display: none;">

    <div class="collapsed-logomark flex justify-center border-b border-white/25 w-full text-center">
      <a href="/" class="text-white/75 inline-block px-1 pt-2 pb-1.5"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 21 19" width="21"><path fill="#FDFEF7" d="M5.32 1.459A9.35 9.35 0 0 1 8.646.168c2.076-.278 4.14.345 6.04 1.13.528.226.98.6 1.358 1.029-.162.129-.354.23-.472.405-.381.688-.394 1.531-.829 2.193-.628.405-1.42.384-2.118.608-.642.212-1.325.328-1.923.657-.212.095-.26.36-.167.558.175.185.443.224.684.252.688.055 1.347-.192 2.02-.285.75-.132 1.514-.136 2.272-.124.395.022.854.009 1.137.34-.897.042-1.807-.05-2.694.126-1.297.298-2.513.853-3.71 1.416-1.032.499-2.083.98-3.01 1.662-.06.061-.114.128-.163.198 1.131-.309 2.184-.848 3.264-1.299.823-.317 1.64-.707 2.52-.828-.533.278-1.11.473-1.61.81-1.72 1.172-3.132 2.72-4.555 4.223-.278.255-.512.6-.896.701.59-.898 1.183-1.804 1.94-2.574.22-.245.511-.432.661-.734-1.302.648-2.455 1.558-3.527 2.534-.473.504-.98.999-1.3 1.62-.19.364-.201.78-.238 1.179-.428-1.56-.096-3.2.439-4.69.546-1.441 1.331-2.819 2.442-3.902.292-.297.647-.518.952-.799-.945.336-1.844.857-2.53 1.598-.528.569-1.066 1.134-1.514 1.77-.39.543-.589 1.188-.87 1.787-.257.546-.318 1.17-.63 1.692 0-.455.13-.895.223-1.336.15-.676.604-1.239.762-1.91-.243.368-.521.712-.755 1.086-.403.752-.717 1.559-.835 2.408-.182.844-.235 1.707-.342 2.561-.252-1.03-.047-2.103.162-3.122.21-.83.449-1.668.914-2.394.249-.558.833-.844 1.15-1.35-.283.261-.517.572-.814.82-.619.478-.98 1.19-1.378 1.845-.236.366-.338.8-.583 1.162-.01-.18-.025-.363.023-.539.158-.601.349-1.197.643-1.747.451-.989.98-1.955 1.705-2.772.653-.705 1.353-1.38 2.176-1.886a.57.57 0 0 1-.005-.036c-1.329.342-2.444 1.207-3.375 2.183-.179.196-.301.442-.517.602.4-1.043.854-2.086 1.521-2.99.772-1.173 1.87-2.1 3.054-2.835-1.466.38-2.705 1.317-3.764 2.365.168-.399.453-.73.7-1.08.883-1.118 1.855-2.19 3.038-2.997ZM9.3 2.856c-.748.327-1.522.615-2.208 1.068-.403.274-.848.495-1.192.848.584-.3 1.192-.567 1.837-.708.494-.095.923-.403 1.432-.433.227-.004.528-.102.686.115-.392.043-.793.03-1.177.134.252.16.566.135.838.246.564.233 1.028.64 1.55.948-.701.129-1.223-.506-1.906-.501.57.46 1.3.85 2.057.72.55-.1 1.132-.127 1.626-.411.422-.213.766-.549 1.191-.755.209-.098.362-.273.54-.413-.012.17-.166.308-.333.323-.347.377-.636.81-1.04 1.132.849-.197 1.324-.995 1.738-1.689.105-.142.09-.32.083-.487-.159.107-.314.247-.518.247-1.214.04-2.268-.764-3.479-.755-.59.016-1.212.044-1.725.371Z"/><path fill="#E2D134" d="M15.329 4.875c.226-.629.382-1.322.833-1.835.293-.142.633.029.932.089.445.178.892.357 1.33.55 1.202.635 1.762 2.078 1.678 3.384-.04.389-.035.831-.315 1.139a2.23 2.23 0 0 0-.903-1.565c-.494-.285-1.083-.283-1.628-.394-1.57-.303-3.213-.327-4.765.094-.363.052-.694.329-1.071.23l-.016-.135a6.038 6.038 0 0 1 1.639-.675c.617-.125 1.255-.153 1.862-.33.25-.068.342-.335.424-.552Zm.536-.084c.482-.106.85-.45 1.297-.634a.81.81 0 0 0 .196-.559c-.626.157-1.444.43-1.493 1.193Zm.249.323-.013.183c.474-.212.893-.573 1.063-1.081-.302.355-.67.635-1.05.898Z"/><path fill="#FDFEF7" d="M10.865 3.41c.131-.191.392-.215.6-.263.117.26-.03.482-.291.546-.025.394.403.672.764.58.323-.063.5-.367.687-.606.189.503-.37 1.05-.87 1.005-.633.06-1.088-.706-.89-1.263ZM11.237 9.557c.392-.2.788-.394 1.185-.585-.924.782-1.646 1.76-2.371 2.719.543-.304.979-.757 1.496-1.1.564-.382 1.029-.884 1.569-1.297-.179.436-.454.83-.567 1.292-.213.918-.216 1.864-.261 2.801.084-.177.158-.36.201-.552.112-.468.348-.89.531-1.33.227-.479.377-.991.629-1.458.086.807.036 1.75.641 2.379-.104-.626-.281-1.252-.186-1.891a5.467 5.467 0 0 0 1.53 2.66c.031-.211-.095-.39-.196-.563a4.366 4.366 0 0 1-.704-2.374c.638 1.327 1.574 2.477 2.432 3.664.419.563.8 1.154 1.26 1.685-.571-.185-1.128-.411-1.696-.604-.87-.364-1.599-.984-2.277-1.624.197.691.44 1.38.49 2.103.08.615-.03 1.232-.016 1.848a5.356 5.356 0 0 0-.432-.836 13.682 13.682 0 0 1-1.289-2.555.791.791 0 0 0-.158-.223c-.054.963-.102 1.95-.441 2.864-.175.546-.491 1.03-.725 1.55.009-.273.131-.546.068-.818-.18-.431-.511-.78-.698-1.208-.446-1.055-.51-2.225-.454-3.356-.065.086-.14.166-.184.267-.322.887-.398 1.835-.556 2.759a.854.854 0 0 1-.101-.382c-.044-.701-.09-1.404-.052-2.105.007-.35.165-.673.192-1.019-.602.907-.967 1.947-1.344 2.963-.23.703-.58 1.362-.75 2.084-.135-1.152-.244-2.332.006-3.478.233-.781.543-1.545.976-2.237a6.442 6.442 0 0 1 2.252-2.043ZM2.288 14.506c-.009-1.325.288-2.698 1.041-3.803-.374 1.015-.73 2.046-.848 3.127-.045.227-.009.504-.193.676Z"/></svg></a>
    </div>
    
    <button id="expand-button" class="flex justify-center px-1 py-1.5 m-0 min-w-0 items-center gap-1 text-sm !text-opacity-75 hover:!text-opacity-100 !text-white" aria-label="Expand menu" aria-expanded="false">
      <span class="size-5"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><path fill="currentColor" fill-rule="evenodd" d="M2 5.75A.75.75 0 0 1 2.75 5h18.5a.75.75 0 0 1 0 1.5H2.75A.75.75 0 0 1 2 5.75ZM2 12a.75.75 0 0 1 .75-.75h18.5a.75.75 0 0 1 0 1.5H2.75A.75.75 0 0 1 2 12Zm0 6.25a.75.75 0 0 1 .75-.75h18.5a.75.75 0 0 1 0 1.5H2.75a.75.75 0 0 1-.75-.75Z" clip-rule="evenodd"/></svg></span>
    </button>
  </div>

  <div id="menu-contents" class="flex flex-col gap-4 flex-1 p-2">
    <div class="flex-[0_0_auto] flex md:flex-col gap-2 items-center">
      
      <div class="flex-1">
        <a href="/" class="md:hidden">
          <img src="/assets/images/logo-horizontal.png" alt="DataRepublican" class="max-w-[240px] h-auto" alt="DataRepublican" />
        </a>    
        <a href="/" class="hidden md:block">
          <img src="/assets/images/logo-vertical.png" alt="DataRepublican" class="max-w-[220px] h-auto mx-auto" alt="DataRepublican" />
        </a>
      </div>

      <button id="mobile-menu-button" class="md:hidden px-2 py-1.5 rounded bg-transparent border-2 border-white/50 flex items-center gap-1 font-semibold text-white">
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path class="menu-icon" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
          <path class="close-icon hidden" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
        <span class="menu-text">Menu</span>
      </button>
    </div>
    <div id="menu-items" class="hidden p-4 md:p-0 md:visible md:flex flex-1 flex-col justify-between md:gap-1 sm:gap-2 fixed md:static right-0 w-full md:w-auto md:h-auto bg-navy z-50 transition-transform duration-300 translate-x-full md:translate-x-0">
      <div class="flex-1 flex flex-col gap-px">

        <div class="flex flex-col gap-0.5">
          <button 
            id="charity-funding-dropdown-button"
            class="nav-dropdown-button flex flex-col text-white no-underline py-1 px-3 rounded focus:outline focus:outline-2 focus:outline-blue focus:outline-offset-2 border-2 bg-transparent mr-0 border-transparent hover:border-white/75 hover:bg-white/10 opacity-75 hover:opacity-100 relative group justify-start items-start transition-opacity"
          >
            <strong class="text-base md:text-sm w-full md:w-auto text-left">Charity funding &amp; financials</strong>
            <span class="opacity-70 font-normal text-sm md:text-[13px] w-full md:w-auto text-left">Track money flow and spending</span>
            <span class="absolute top-[calc(50%-.625rem)] right-2 size-5 opacity-50 group-hover:opacity-100 transition-transform rotate-90">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m9 4 7.293 7.293a1 1 0 0 1 0 1.414L9 20"/></svg>
            </span>
          </button>
          
          <div 
            id="charity-funding-dropdown"
            class="nav-dropdown-content relative pl-2 overflow-hidden transition-all duration-300 flex flex-col gap-0.5"
          >
            <a 
  href="/expose" 
  class="nav-item group flex no-underline py-1.5 px-3 rounded focus:outline focus:outline-2 focus:outline-blue focus:outline-offset-2 border-2 border-transparent hover:border-white/75 hover:bg-white/10 flex-col text-white select-none "
  
  title="/relationsindex | /expose"
>
  
  <strong class="md:text-sm">
    Charity graph
    
  </strong>
  
    <span class="opacity-70 text-sm font-normal md:text-[13px]">Visualize how the money flows</span>
  
  
</a> 
            <a 
  href="/nonprofit" 
  class="nav-item group flex no-underline py-1.5 px-3 rounded focus:outline focus:outline-2 focus:outline-blue focus:outline-offset-2 border-2 border-transparent hover:border-white/75 hover:bg-white/10 flex-col text-white select-none "
  
  title="/relationsindex | /nonprofit"
>
  
  <strong class="md:text-sm">
    Charity funding
    
  </strong>
  
    <span class="opacity-70 text-sm font-normal md:text-[13px]">Discover % of taxpayer funds used</span>
  
  
</a> 
            <a 
  href="/nonprofit/assets" 
  class="nav-item group flex no-underline py-1.5 px-3 rounded focus:outline focus:outline-2 focus:outline-blue focus:outline-offset-2 border-2 border-transparent hover:border-white/75 hover:bg-white/10 flex-col text-white select-none "
  
  title="/relationsindex | /nonprofitassets"
>
  
  <strong class="md:text-sm">
    Nonprofit financials
    
  </strong>
  
    <span class="opacity-70 text-sm font-normal md:text-[13px]">Analyze expenses & assets</span>
  
  
</a> 
          </div>
        </div>
        <a 
  href="/relations" 
  class="nav-item group flex no-underline py-1.5 px-3 rounded focus:outline focus:outline-2 focus:outline-blue focus:outline-offset-2 border-2 border-transparent hover:border-white/75 hover:bg-white/10 flex-col text-white select-none "
  
  title="/relationsindex | /relations"
>
  
  <strong class="md:text-sm">
    People relations
    
      <span class="bg-green px-1 py-0.5 rounded-sm font-semibold uppercase text-xs ml-1">Beta</span>
    
  </strong>
  
    <span class="opacity-70 text-sm font-normal md:text-[13px]">Explore people connections</span>
  
  
</a> 

        <div class="flex flex-col gap-0.5">
          <button 
            id="officers-dropdown-button"
            class="nav-dropdown-button flex flex-col text-white no-underline py-1 px-3 rounded focus:outline focus:outline-2 focus:outline-blue focus:outline-offset-2 border-2 bg-transparent mr-0 border-transparent hover:border-white/75 hover:bg-white/10 relative group justify-start items-start"
          >
            <strong class="text-base md:text-sm w-full md:w-auto text-left">Officers &amp; salaries</strong>
            <span class="opacity-70 font-normal text-sm md:text-[13px] w-full md:w-auto text-left">Search NGO officers and salaries</span>
            <span class="absolute top-[calc(50%-.625rem)] right-2 size-5 opacity-50 group-hover:opacity-100 transition-transform rotate-90">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m9 4 7.293 7.293a1 1 0 0 1 0 1.414L9 20"/></svg>
            </span>
          </button>
          
          <div 
            id="officers-dropdown"
            class="nav-dropdown-content relative pl-2 overflow-hidden transition-all duration-300 flex flex-col gap-0.5"
          >
            <a 
  href="/officers" 
  class="nav-item group flex no-underline py-1.5 px-3 rounded focus:outline focus:outline-2 focus:outline-blue focus:outline-offset-2 border-2 border-transparent hover:border-white/75 hover:bg-white/10 flex-col text-white select-none "
  
  title="/relationsindex | /officers"
>
  
  <strong class="md:text-sm">
    Principal officer search
    
  </strong>
  
    <span class="opacity-70 text-sm font-normal md:text-[13px]">Explore for NGO officers and salaries</span>
  
  
</a> 
            <a 
  href="/officers/bulk" 
  class="nav-item group flex no-underline py-1.5 px-3 rounded focus:outline focus:outline-2 focus:outline-blue focus:outline-offset-2 border-2 border-transparent hover:border-white/75 hover:bg-white/10 flex-col text-white select-none "
  
  title="/relationsindex | /officersbulk"
>
  
  <strong class="md:text-sm">
    Bulk NGO officer search
    
  </strong>
  
    <span class="opacity-70 text-sm font-normal md:text-[13px]">Search and cross-reference names</span>
  
  
</a> 
          </div>
        </div>

        <div class="flex flex-col gap-0.5">
          <button 
            id="political-funding-dropdown-button"
            class="nav-dropdown-button flex flex-col text-white no-underline py-1 px-3 rounded focus:outline focus:outline-2 focus:outline-blue focus:outline-offset-2 border-2 bg-transparent mr-0 border-transparent hover:border-white/75 hover:bg-white/10 relative group justify-start items-start"
          >
            <strong class="text-base md:text-sm w-full md:w-auto text-left">Political campaign &amp; grant funding</strong>
            <span class="opacity-70 font-normal text-sm md:text-[13px] w-full md:w-auto text-left">Donations and taxpayer-funded grants</span>
            <span class="absolute top-[calc(50%-.625rem)] right-2 size-5 opacity-50 group-hover:opacity-100 transition-transform rotate-90">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m9 4 7.293 7.293a1 1 0 0 1 0 1.414L9 20"/></svg>
            </span>
          </button>
          
          <div 
            id="political-funding-dropdown"
            class="nav-dropdown-content relative pl-2 overflow-hidden transition-all duration-300 flex flex-col gap-0.5"
          >
            <a 
  href="/donations2024" 
  class="nav-item group flex no-underline py-1.5 px-3 rounded focus:outline focus:outline-2 focus:outline-blue focus:outline-offset-2 border-2 border-transparent hover:border-white/75 hover:bg-white/10 flex-col text-white select-none "
  
  title="/relationsindex | /donations2024"
>
  
  <strong class="md:text-sm">
    Small dollar donations
    
  </strong>
  
    <span class="opacity-70 text-sm font-normal md:text-[13px]">ActBlue & WinRed donations</span>
  
  
</a> 
            <a 
  href="/award_search" 
  class="nav-item group flex no-underline py-1.5 px-3 rounded focus:outline focus:outline-2 focus:outline-blue focus:outline-offset-2 border-2 border-transparent hover:border-white/75 hover:bg-white/10 flex-col text-white select-none "
  
  title="/relationsindex | /award_search"
>
  
  <strong class="md:text-sm">
    Federal grant search
    
  </strong>
  
    <span class="opacity-70 text-sm font-normal md:text-[13px]">Map funds to connected orgs</span>
  
  
</a> 
          </div>
        </div>

      <button 
        id="election-results-dropdown-button"
        class="nav-dropdown-button flex flex-col text-white no-underline py-1 px-3 rounded focus:outline focus:outline-2 focus:outline-blue focus:outline-offset-2 border-2 bg-transparent mr-0 border-transparent hover:border-white/75 hover:bg-white/10 relative group justify-start items-start"
        
      >
        <strong class="text-base md:text-sm w-full md:w-auto text-left">Voter turnout analysis</strong>
        <span class="opacity-70 font-normal text-sm md:text-[13px] w-full md:w-auto text-left">2024 vs. previous elections</span>
        <span class="absolute top-[calc(50%-.625rem)] right-2 size-5 opacity-50 group-hover:opacity-100 transition-transform rotate-90">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m9 4 7.293 7.293a1 1 0 0 1 0 1.414L9 20"/></svg>
        </span>
      </button> 

      <div 
        id="election-results-dropdown"
        class="nav-dropdown-content relative pl-2 overflow-hidden transition-all duration-300 flex flex-col gap-0.5"
      >
        <a 
  href="/florida" 
  class="nav-item group flex no-underline py-1.5 px-3 rounded focus:outline focus:outline-2 focus:outline-blue focus:outline-offset-2 border-2 border-transparent hover:border-white/75 hover:bg-white/10 items-center gap-2 text-white/80 hover:text-white select-none "
  
  title="/relationsindex | /florida"
>
  
    <span class="size-5 fill-current"><svg fill="fillCurrent" xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 30 30">
  <path
    d="M21.751,3.785h0.032v0.032l0.081,0.016h0.032l0.049-0.032l0.016-0.016l0.032,0.016l0.016,0.016v0.016h0.016 l0.016,0.032l0.016,0.081L22.043,4.06l0.032,0.341l0.032,0.113l-0.049-0.032L22.01,4.433l-0.016-0.081l-0.016-0.081l-0.016-0.049 L21.945,4.19l-0.032-0.032h-0.049l-0.016,0.016v0.032l0.016,0.097v0.065l0.016,0.081l0.032,0.049l0.065,0.016V4.53l0.113,0.065 l0.032,0.032l0.032,0.049l0.016,0.032l0.016,0.016l0.032,0.016h0.016l0.016,0.032l0.016,0.065l0.016,0.13l0.016,0.016L22.334,5 l0.016,0.032l0.016,0.032l0.016,0.178l0.032,0.178l0.178,0.421l0.049,0.081l0.097,0.13l0.016,0.065l0.081,0.308l0.194,0.454v0.146 h0.016h0.032l0.016,0.016v0.032v0.032l0.032,0.016l0.049,0.016l-0.032,0.032l0.032,0.049l0.049,0.211l0.032,0.032l0.032,0.032 l0.097,0.243l0.13,0.178l0.032,0.065l0.016,0.081l0.032,0.081l0.032,0.081l0.211,0.259l0.292,0.454l0.34,0.616l0.422,0.567 l-0.016,0.065l0.065,0.049l0.065,0.032l0.049,0.065l0.032,0.081l0.6,0.697l0.308,0.373l0.227,0.243l0.276,0.341l0.13,0.259 l0.065,0.065l-0.016,0.097l-0.065,0.081l-0.032,0.016v0.032l-0.016,0.032l-0.016,0.032l-0.032,0.016v0.032l0.065,0.389l-0.016,0.065 l0.016,0.016l0.016,0.097l0.049,0.227l0.146,0.389l0.065,0.113l0.032,0.065l0.097,0.162l0.373,0.405l0.032,0.162l-0.113-0.146 l-0.016-0.032l-0.032-0.032l-0.13-0.113l-0.049-0.13l-0.276-0.357l-0.162-0.308l-0.065-0.162l-0.113-0.713l0.032-0.535l-0.032-0.162 l-0.049-0.162l-0.032-0.049l-0.032-0.032l-0.065-0.016l-0.065,0.016h-0.016l-0.016-0.016h-0.016H26.11v0.016l0.016,0.065 l-0.032,0.032h-0.032h-0.243l-0.065-0.016l-0.065-0.049l-0.032-0.065v-0.081v-0.081l0.016-0.065l0.032,0.016l0.016-0.065 l0.016-0.081l-0.032-0.065l-0.162-0.032l-0.13-0.097l-0.081-0.016l0.113,0.356l0.065,0.097v0.032l-0.016,0.032l0.146,0.194 l0.032,0.081l0.032,0.162l0.146,0.373l0.049,0.081l0.113,0.227l0.13,0.194l0.049,0.097L27.78,15.6l0.227,0.6l0.762,1.216 l0.016,0.065l-0.049-0.081l-0.049-0.032h-0.146l-0.097-0.032l-0.032-0.016l-0.016-0.016l-0.032-0.016l-0.049,0.016l0.016,0.032 l0.113,0.081l0.032,0.016l0.065,0.016l0.032,0.016l0.081-0.049h0.032l0.162,0.13l0.032,0.049l0.113,0.032l0.032,0.065l0.016,0.049 l0.113,0.162l0.113,0.211l0.097,0.146l0.016,0.049l-0.016,0.049l-0.032,0.016l-0.048,0.016l-0.032,0.016v0.032l0.049,0.016h0.081 l0.049,0.032l0.032,0.032l0.162,0.373l0.016,0.113l-0.049,0.065V19.1l0.065,0.049l0.049,0.13l0.097,0.519l-0.016,0.13l-0.049,0.016 l0.065,0.551l-0.016,0.13v0.065l0.032,0.146v0.065l-0.016,0.065l0.032,0.097v0.616v0.13l-0.065,0.049l0.016,0.032l0.065,0.081 L30,23.185h-0.032l-0.016-0.178l-0.016-0.178l-0.016-0.113l-0.016-0.049h-0.032l-0.113,0.211l0.016,0.146l-0.032,0.113l0.016,0.178 l-0.032,0.081l-0.049,0.016l-0.032,0.016l-0.033,0.016l-0.032,0.032v0.049v0.097l-0.049,0.178l-0.097,0.13v0.081l0.032,0.211v0.065 l-0.049,0.097l-0.032,0.081l0.016,0.081l0.016,0.081l0.032,0.016l0.032,0.016l0.016,0.016l-0.032,0.065l-0.016,0.081l0.049,0.032 l0.049,0.016l0.032,0.032v0.049l-0.113,0.13l-0.146,0.227v0.032v0.032l-0.016,0.049l-0.049,0.081v0.049v0.081l0.065,0.049 l0.049,0.032v0.049l-0.065-0.032l-0.081-0.097l-0.065-0.016v-0.065l-0.065,0.016l-0.065,0.049l-0.032,0.065l0.081-0.016l0.065,0.032 l0.065,0.065l0.016,0.081h-0.017l-0.032-0.097l-0.065-0.032h-0.081l-0.049,0.049l-0.016-0.017l-0.016-0.032l-0.032-0.016h-0.032 l0.016-0.032v-0.016l0.016-0.016l0.032-0.016v-0.016l-0.032-0.032l-0.049,0.016l-0.146,0.032l-0.049,0.032l-0.032,0.065 l-0.016,0.097l-0.016,0.065l-0.065-0.016h0.016v-0.016l0.016-0.016l-0.146,0.049l-0.016,0.016l0.016,0.049l0.016,0.016l0.016,0.032 l-0.032,0.032h-0.016l-0.065-0.016l-0.049,0.032l-0.049,0.081l-0.049,0.016h-0.065h-0.065l-0.049-0.049v0.016v0.016l-0.016,0.016 v0.016H27.99l-0.016-0.016l-0.032-0.016l-0.016-0.016l-0.016,0.032v0.016h-0.032h-0.032v-0.032v-0.032h-0.113l-0.065-0.049 l-0.081,0.081l-0.016,0.016l-0.081,0.097l-0.065,0.032l-0.146,0.016l-0.113,0.049l-0.146,0.032l-0.178,0.081l-0.049-0.016 l-0.211-0.13l-0.081-0.13l-0.065-0.113l-0.016-0.13l0.016-0.162l0.049-0.146l0.049-0.065l-0.016,0.065h0.049l0.049,0.016 l0.049,0.032l0.032,0.032l0.081,0.113h0.016l0.049,0.032l0.308,0.065l0.016,0.032l-0.032,0.016l-0.032,0.016l-0.016,0.016v0.016 l0.081,0.016h0.081l0.081-0.032l0.049-0.065l0.032-0.097l-0.049-0.065l-0.243-0.194l-0.081-0.016h-0.13l-0.065-0.032l-0.032-0.016 h-0.146l-0.195-0.113l-0.032-0.032l-0.016-0.049l-0.032-0.081l-0.016-0.032l-0.065-0.146l-0.146-0.13l-0.065-0.065l0.065-0.065 l0.016-0.032l0.016-0.032l-0.016-0.016l-0.032-0.016l-0.081,0.032l-0.049-0.016l-0.016-0.032l-0.065-0.178l-0.113-0.13v-0.049 l-0.032-0.032l-0.032-0.049l-0.016-0.065h-0.114h-0.032l-0.032-0.032l-0.065-0.097l-0.016-0.016l-0.049-0.016l0.016-0.049 l0.097-0.097l-0.032-0.016l-0.097-0.097l-0.097-0.065l-0.097-0.065H25.17h-0.113l-0.049-0.016l-0.049-0.032l-0.065-0.065 l-0.049-0.016l-0.032,0.049h-0.049l-0.049-0.049l-0.081-0.016l-0.048-0.032h-0.049v0.016l-0.049,0.032l-0.032,0.016l0.016-0.032 l-0.016-0.016v-0.032l-0.032,0.016h-0.049l-0.032-0.032l-0.032-0.049l-0.032,0.032l-0.016,0.065l-0.032,0.032l-0.049,0.016h-0.049 l-0.032-0.016l-0.032-0.032l-0.016,0.032v0.032h-0.016l-0.016,0.032v0.016l-0.016,0.016h-0.032l-0.016-0.016l-0.032-0.032 l-0.016-0.032l-0.049-0.113l0.049-0.032l0.049,0.016l0.049,0.049l0.049,0.016l0.032-0.032l0.016-0.049l0.032-0.065V23.25 l-0.049,0.016l-0.097,0.016h-0.032l-0.049-0.033l-0.032-0.032l-0.016-0.049l0.016-0.049l-0.113-0.065l-0.081-0.097l-0.097-0.292 l-0.016,0.049v0.049v0.032l0.016,0.049H23.55l-0.113-0.276l-0.081-0.324v-0.146v-0.016v-0.016l-0.146-0.194l-0.016-0.065h0.016 v0.032h0.032l-0.049-0.259l-0.032-0.081l-0.032-0.049l-0.097-0.13l-0.032-0.049l0.016,0.049l0.032,0.097l-0.016,0.049l-0.016,0.016 l-0.032-0.016l-0.016-0.016H22.95h-0.081l-0.211-0.081l-0.049,0.032h-0.016l-0.016-0.016l-0.016,0.032l-0.016-0.032l-0.016-0.065 v-0.065l0.016-0.032h0.016l0.032,0.032l0.032,0.016l0.032-0.016l0.016-0.016v-0.016l0.097-0.081l0.081-0.113l0.049-0.13 l-0.016-0.097l0.032-0.065l0.13-0.178l0.016-0.049l0.016-0.032l0.049-0.032l0.032,0.016l0.032-0.032l0.032-0.032l0.016-0.032v-0.049 l-0.049,0.032l-0.081,0.065l-0.065,0.016l-0.065,0.032l-0.049,0.065l-0.113,0.146l-0.032,0.081l-0.065,0.324v0.032l-0.032,0.016 l-0.081,0.032l-0.032,0.032l-0.016-0.065l-0.065,0.049l-0.049,0.032l-0.049,0.016l-0.065-0.065l-0.049-0.065v-0.049l0.016-0.065 v-0.097l-0.032-0.065l-0.097-0.146l-0.016-0.049l-0.016-0.097l0.016-0.486v-0.097l-0.016-0.097l-0.049-0.032l-0.049-0.016 l-0.081-0.049v-0.065l0.065-0.065l0.162-0.13l0.081-0.032l0.032-0.016l0.016-0.049l0.032-0.13l-0.065,0.032l-0.065,0.097 l-0.146,0.049l-0.065,0.032l-0.065,0.016h-0.081l-0.016,0.065l-0.032,0.016l-0.049,0.016l-0.016,0.049l-0.016,0.016l-0.049-0.032 l-0.081-0.065v-0.081l-0.032,0.016l-0.049,0.049l-0.065-0.016l-0.081-0.113l-0.049-0.032l-0.081-0.032l0.016,0.032l0.049,0.065 l0.13,0.13l0.049,0.032l0.016-0.032l0.049,0.032l0.065,0.113l0.032,0.032l0.016,0.016l0.081,0.146l0.065,0.178l0.016,0.065 l-0.016,0.049l-0.032,0.032l-0.032-0.113l-0.032-0.049l-0.016,0.016l-0.016,0.032l-0.016,0.032l-0.016,0.032l-0.016-0.016 l-0.049-0.032h-0.016h-0.016v0.016l-0.032,0.016h-0.016l-0.049-0.032l-0.032-0.016l-0.049-0.016h-0.032h-0.032L21.2,20.057 l-0.162-0.341l-0.113-0.097l0.016,0.065l0.065,0.097l0.016,0.049l-0.049-0.016l-0.016-0.016H20.94l-0.032-0.081L20.47,19.1 l-0.049-0.146l-0.113-0.162l-0.032-0.081l0.016,0.049l0.016,0.016l0.032,0.016l-0.016-0.065l-0.016-0.065l-0.032-0.049l-0.049-0.016 l0.016,0.065h-0.033l-0.049-0.081l-0.081-0.081l-0.049-0.065l-0.016-0.097l0.016,0.016h0.016l0.016,0.016l0.016,0.016h0.016 l-0.016-0.097l-0.097-0.146l-0.065-0.194l-0.065-0.049l-0.081-0.016l-0.146-0.097h-0.146l-0.065-0.016l-0.049-0.049l-0.097-0.178 l-0.016-0.065h0.016l0.081,0.113l0.016,0.032l0.049,0.032l0.097,0.032l0.049,0.032l0.032-0.032v-0.032l0.016-0.049l-0.016-0.032 h-0.016l-0.032,0.016h-0.032l-0.016-0.016l-0.032-0.016l0.049-0.081l0.097,0.016l0.097,0.032l0.081-0.016l-0.032-0.032l-0.049-0.016 H19.66l-0.049-0.016l0.049-0.032l0.097-0.049l0.049-0.032l0.016-0.065l-0.049,0.016l-0.049,0.032l0.032-0.049l-0.016-0.016 l-0.016-0.032l0.065-0.065l0.032-0.081l0.016-0.097l0.032-0.081l0.097-0.097v-0.032v-0.065l0.032-0.016l0.032-0.016l0.016-0.016 l0.049-0.13l0.016-0.032l0.081-0.081l0.032-0.049l0.097-0.146l0.016-0.065l-0.016-0.097l-0.097-0.162l-0.065-0.162l-0.049-0.049 l-0.065,0.016l-0.065,0.049l-0.032,0.049v0.065l0.016,0.162l0.032,0.049l0.016,0.049l-0.016,0.032l-0.13,0.016h-0.032l-0.065-0.081 l-0.016-0.097v-0.194l-0.049-0.113l-0.065-0.032l-0.097-0.016l-0.113,0.016l-0.016-0.032l0.081-0.032v-0.032l-0.113-0.049 l-0.049-0.032l-0.049-0.032h-0.016v0.016v0.049l-0.162-0.13l0.016,0.032l0.049,0.065v0.032v0.032l-0.016,0.049l0.016,0.016 l-0.032,0.032l0.016,0.016h0.032l0.13-0.016l-0.032,0.065l-0.162,0.065l-0.049,0.081l0.146,0.032l0.146,0.065l0.146,0.032 l0.162-0.049l-0.032,0.032l-0.113,0.097l0.016,0.032l0.032,0.097v0.049v0.032l-0.049,0.081v0.016v0.032l-0.032,0.13l0.032,0.065 v0.081l-0.032,0.065l-0.049,0.032h-0.065h-0.032l-0.016-0.016l-0.016-0.032l-0.016-0.097v-0.016h-0.081l-0.049-0.016l-0.081-0.081 l-0.081-0.081l-0.162-0.081l-0.081-0.065v0.065l0.032,0.049l0.259,0.211l0.049,0.065l0.081,0.13l0.032,0.097v0.049l-0.049-0.016 l-0.049-0.065l-0.032-0.081l-0.032-0.064l-0.065-0.13l-0.259-0.194l-0.065-0.081l-0.016-0.049l-0.049-0.113L18.59,16.07v-0.081 l0.032-0.081l0.032-0.065l0.032-0.032l-0.032,0.049l-0.016,0.081v0.065l0.032,0.065l0.081-0.341l0.016-0.389v-0.113v-0.049 L18.8,15.13l-0.049-0.049l-0.032-0.065l-0.032-0.097l-0.016-0.049v-0.081v-0.065l0.049,0.016l0.032-0.065l0.016-0.049l0.016-0.113 l0.065-0.13l0.016-0.065l-0.016-0.049l-0.016,0.016l-0.032,0.016l0.081-0.373l0.049-0.049l-0.016-0.032v-0.016l0.065-0.162 l-0.032-0.211v-0.049l0.016-0.13l-0.032-0.357l0.032-0.081l-0.032-0.016l-0.016-0.049v-0.032l0.016-0.032l0.016-0.032V12.65 l-0.016-0.032l-0.016-0.032l-0.016-0.146l-0.016-0.032h-0.032h-0.016l-0.016-0.016l-0.032-0.049l-0.081-0.081l-0.016-0.032 l0.049-0.081l0.065,0.032l0.097,0.097l-0.049-0.113v-0.049v-0.194l-0.016-0.065l-0.049-0.049h-0.032h-0.065l-0.032-0.016 l-0.032-0.016l-0.178-0.162l-0.016-0.065V11.45l-0.032,0.016l-0.049-0.016l-0.032-0.032l0.016-0.049v-0.032l-0.016-0.13v-0.016 l-0.146-0.097l-0.049-0.065l0.065-0.049l-0.065-0.032l-0.032-0.032l-0.016-0.065l-0.016-0.081l-0.065,0.049l-0.016,0.016 l-0.032-0.016l-0.049-0.032l-0.016-0.032l-0.065,0.065l-0.081,0.016l-0.081-0.032l-0.065-0.032l-0.049,0.016l-0.097,0.016 l-0.049,0.016l-0.065,0.049H17.31h-0.049h-0.065l-0.032-0.049V10.77l-0.032-0.016l-0.049-0.016l-0.032-0.016v-0.032l0.032-0.049 l-0.032-0.032l-0.032-0.049l-0.032-0.049l-0.065-0.016l-0.049-0.016l-0.065-0.016l-0.065-0.016l-0.049-0.032l-0.016-0.032v-0.032 l-0.016-0.097h-0.016l-0.081-0.113l-0.13-0.13L16.37,9.943l-0.081-0.049l-0.097,0.017l-0.113-0.065l-0.211-0.194l-0.032,0.016 l-0.049-0.016l-0.097-0.065l0.016-0.032L15.689,9.49l-0.016-0.049L15.64,9.408l0.032-0.065l0.016-0.081l-0.016-0.097l-0.016-0.081 l-0.049-0.049h-0.065L15.462,9.02l-0.081-0.016l-0.032-0.016L15.3,8.955l-0.016-0.016l-0.13-0.049l-0.065-0.032l-0.081-0.065 l-0.065-0.081l-0.032-0.065V8.614l-0.032-0.097l-0.032-0.049l-0.032-0.016l-0.032-0.016L14.765,8.42l-0.049-0.081l-0.146-0.13 L14.522,8.16L14.49,8.128L14.311,8.03l-0.032-0.032h-0.065l-0.049-0.032l-0.097-0.081l-0.081,0.032l-0.162-0.049l-0.373-0.162 L13.16,7.512l-0.065,0.017l-0.113,0.065l-0.243,0.065l-0.065,0.049l-0.049,0.016L12.61,7.691l-0.016-0.049l-0.032-0.016h-0.016 V7.609h-0.016l-0.016-0.016L12.48,7.609l-0.016,0.049h-0.016l-0.065,0.016l-0.016-0.016H12.35h-0.032L12.302,7.69l-0.032,0.049 l-0.016,0.049v0.016H12.14L12.107,7.82l-0.13,0.081L11.961,7.95l0.016,0.065l-0.032-0.016h-0.016V7.982l-0.032,0.032v0.016v0.049l0.016,0.016l0.016,0.032V8.144l0.032-0.032V8.096l0.032,0.032l0.081,0.081v0.016h-0.049l-0.097-0.032l-0.13-0.016 l-0.081-0.049h-0.049l-0.032,0.065h0.049l0.016,0.032l0.016,0.049l0.032,0.016h0.227l0.113,0.032l0.032,0.081l-0.032,0.098 L12.01,8.582l0.032-0.049l0.016-0.016V8.485l-0.146-0.032l-0.146,0.016l-0.065,0.016l-0.065,0.032l-0.065,0.016l-0.049-0.049 l-0.178,0.146l-0.13,0.146l-0.162,0.065l-0.113,0.081l-0.146,0.211l-0.049,0.016l-0.098,0.032L10.6,9.198l-0.081,0.081L10.47,9.311 l-0.065,0.032l-0.049,0.032l-0.049,0.049l-0.032,0.016l-0.032-0.065l0.016-0.032l0.081-0.194l-0.065-0.016l-0.032,0.032 l-0.049,0.032L10.146,9.23l-0.049,0.032l-0.049,0.113L9.952,9.392l-0.049,0.13L9.854,9.554H9.563L9.417,9.571L9.012,9.765H8.947 H8.849H8.768l-0.13,0.081L8.574,9.814L8.509,9.765L8.46,9.716L8.363,9.376L8.315,9.165l0.049-0.097L8.379,9.1l0.016,0.292 l0.032,0.081L8.46,9.57l0.049,0.081l0.113,0.13l0.016,0.016h0.065l0.032-0.016l0.032-0.049l0.016-0.049L8.768,9.668V9.619 L8.752,9.327L8.703,9.246l-0.13-0.13L8.541,9.052L8.509,8.987L8.444,8.906L8.38,8.857L8.315,8.809L7.877,8.663L7.764,8.582 L7.748,8.566L7.731,8.533L7.715,8.517L7.699,8.468h0.032L7.78,8.533l0.081,0.065l0.097,0.049h0.065L7.52,8.322L7.472,8.306 L7.277,8.144L7.245,8.095h0.016h0.227l0.016,0.081l0.227,0.049l0.081,0.049l0.065,0.081l0.13,0.081l0.13,0.049l0.065-0.049 l0.016-0.032l0.065-0.016l0.032-0.032L8.298,8.306H8.266H8.217H8.185L8.169,8.29V8.274L8.152,8.258L8.136,8.29L8.104,8.387 L8.071,8.42L8.007,8.404L7.974,8.339L7.958,8.193L7.942,8.144L7.877,8.177L7.845,8.144L7.861,8.08L7.91,8.031L7.893,7.998 L7.829,8.015L7.78,8.047L7.731,8.08L7.65,8.047L7.666,8.08L7.65,8.096v0.016v0.032L7.585,8.096L7.504,8.063L7.423,8.031L7.359,8.063 L7.326,8.015L7.294,7.998L7.164,7.95L7.132,7.933L7.099,7.901L7.067,7.869l0.065-0.065l0.13-0.194l0.065-0.016l0.081,0.016 l0.13-0.178h0.081L7.553,7.334L7.521,7.285L7.488,7.269L7.456,7.301L7.391,7.463L7.326,7.512L7.31,7.463L7.261,7.48L7.213,7.512 L7.164,7.528L7.132,7.561L7.115,7.609L7.083,7.642H7.051L7.034,7.561L7.002,7.512L6.937,7.447L6.889,7.366L6.856,7.447L6.824,7.48 L6.71,7.496L6.646,7.528L6.597,7.577L6.564,7.626l0.032,0.081l0.049,0.032h0.049l0.049-0.032L6.807,7.69h0.081l0.032,0.032 L6.97,7.771l0.049,0.032L6.97,7.901L7.002,7.95l0.065,0.032l0.065,0.049L7.115,8.08L7.066,8.047L7.034,8.063L7.066,8.08l0.032,0.032 L7.001,8.096L6.548,7.836l-0.324-0.13L5.786,7.545l-0.47-0.097L4.684,7.334H4.263L4.149,7.285l0.016-0.016V7.253l0.049,0.016 l0.292-0.016l0.243,0.016l0.032-0.016l0.032-0.049L4.83,7.139V7.091h0.016h0.016l0.016,0.049l0.032,0.049L4.96,7.221l0.162,0.016 l0.016-0.016l0.016-0.032l0.016-0.032H5.154L5.09,7.139L5.057,7.123L5.041,7.107l0.032-0.032h0.064l0.049,0.016l0.097,0.081 l0.178,0.032l0.032,0.016l0.081,0.032l0.032-0.032V7.172L5.576,7.139L5.559,7.123L5.446,7.01L5.413,6.945L5.43,6.929l0.032-0.032 L5.446,6.832L5.365,6.896L5.3,6.913L5.251,6.88L5.203,6.767L5.138,6.832L5.073,6.848L4.927,6.832L4.846,6.848L4.7,6.897L4.636,6.913 L4.587,6.945L4.538,6.994L4.506,7.026H4.441L4.376,6.978l0.016-0.065l0.065-0.113H4.376L4.344,6.815L4.311,6.832L4.295,6.88H4.263 L4.23,6.848L4.182,6.799l0.016,0.049L4.23,6.945L4.214,6.977L4.182,7.01L4.149,7.026L4.1,7.058H4.052L4.019,7.075L3.987,7.139 L3.938,7.156H3.857v0.016v0.065L3.825,7.269L3.55,7.285L3.258,7.334L3.177,7.318L3.112,7.366L3.015,7.399L2.804,7.415l-0.551,0.13 l-0.341,0.13L1.734,7.707L1.75,7.658l0.016-0.016h0.032l0.13-0.081L2.14,7.48l0.194-0.016l0.065-0.016L2.61,7.237l0.049,0.016 l0.065,0.016l0.049,0.016V7.237L2.739,7.204L2.658,7.172L2.577,7.156H2.512L2.48,7.139L2.415,7.058L2.399,7.042L2.367,7.058 L2.334,7.042L2.318,7.026V6.993l0.016-0.065L2.383,6.88l0.113-0.065L2.48,6.799V6.783L2.464,6.766L2.399,6.815L2.35,6.75 L2.302,6.669L2.221,6.637l0.049,0.065V6.75L2.253,6.783L2.204,7.009L2.156,7.107v0.146L2.123,7.301L2.058,7.318L2.042,7.269V7.204 l0.016-0.065L2.026,7.091L2.01,7.01L1.977,6.961H1.896V6.929V6.88l0.016-0.016H1.848L1.815,6.832L1.799,6.783L1.75,6.767 L1.702,6.783L1.686,6.832l0.032,0.13L1.734,7.01l0.081,0.097l0.016,0.065v0.065L1.75,7.399H1.734V7.382H1.718H1.702L1.686,7.48 L1.621,7.512H1.54L1.475,7.561v0.049l0.016,0.097L1.475,7.756L1.459,7.772L1.362,7.788L1.329,7.804l0.016,0.081L1.264,7.918 L0.778,8.08L0.713,8.112H0.681L0.6,8.144L0.568,8.161V8.128l0.049-0.016l0.016-0.032l0.016-0.016l0.032-0.032l0.032-0.016 l0.13-0.032L0.795,7.966L0.73,7.95l0.032-0.016l0.097-0.016l0.032-0.016l0.049-0.032L0.957,7.82V7.787L0.908,7.755V7.723l0.081-0.13 l0.065-0.049l0.081-0.032L1.167,7.48V7.431L1.151,7.382L1.119,7.333H1.086L1.005,7.35L0.973,7.333L0.956,7.317L0.892,7.301V7.285 L0.794,7.091L0.778,7.026L0.794,7.01V6.977l0.049-0.113l0.032-0.113V6.605V6.54V6.507L0.859,6.491L0.827,6.459L0.519,6.313 L0.47,6.28L0.405,6.216l-0.081-0.13L0.308,6.054L0.114,5.908L0.065,5.859L0.033,5.794L0.016,5.762L0,5.73V5.713l0.016-0.032V5.649 L0.081,5.47V5.454L0.065,5.26l0.016-0.049l0.162-0.016l0.551-0.049l0.567-0.065l0.567-0.049l0.567-0.049l0.551-0.065L3.614,4.87 l0.567-0.049l0.551-0.065L5.3,4.692l0.567-0.049l0.551-0.065l0.567-0.065l0.567-0.049l0.551-0.065l0.567-0.065l0.567-0.065 L9.222,4.287l0.016,0.049l0.016,0.016l0.065,0.032l0.032,0.016L9.368,4.45l0.049,0.113l0.032,0.032l0.049,0.097l0.049,0.081 l0.016,0.178L9.66,5.228l0.178,0.146l0.016-0.016h0.113H10h0.065l0.113-0.016h0.146l0.178-0.016h0.211l0.243-0.016l0.275-0.016 l0.292-0.016l0.324-0.016l0.34-0.016l0.357-0.016l0.373-0.032l0.389-0.016l0.389-0.032L14.1,5.13l0.389-0.016l0.405-0.032 L15.3,5.049l0.389-0.016L16.077,5l0.389-0.016l0.357-0.032l0.356-0.016l0.324-0.032l0.308-0.016l0.292-0.016l0.259-0.032 l0.243-0.016L18.8,4.805h0.178l0.13-0.016l0.146-0.016v0.016v0.032l-0.016,0.033V4.87v0.016l0.016,0.016l0.016,0.032l0.097,0.097 l0.016,0.016l0.032,0.032v0.016l0.016,0.032v0.016v0.016l-0.016,0.065v0.049v0.032v0.016l0.016,0.032l0.081,0.146l0.016,0.032 l0.016,0.016h0.032l0.016,0.016h0.032l0.162-0.049h0.032l0.065,0.016h0.016l0.016-0.016l0.097-0.032l0.016-0.016l0.016-0.016V5.422 V5.389l-0.032-0.113V5.26V5.195l0.032-0.259l0.016-0.276l-0.016-0.049V4.563l-0.016-0.016l-0.016-0.032l-0.081-0.081l-0.032-0.032 l-0.016-0.049V4.336l-0.016-0.049V4.255l0.016-0.097V4.141V4.109l-0.032-0.097V3.963V3.946V3.93l0.016-0.016l0.032-0.049V3.849 V3.817V3.785l0.016-0.016l0.016-0.016h0.032h0.032h0.032l0.016-0.016V3.72l0.016-0.032V3.671l-0.016-0.016l0.016-0.032V3.606 l0.016-0.016l0.032-0.016h0.016h0.049l0.032-0.016h0.016h0.032l0.065,0.032l0.032,0.016l0.049,0.016l0.34,0.097l0.032-0.016h0.032 h0.049l0.049,0.016l0.016,0.032l0.049,0.016l0.049,0.016L21.2,3.801h0.032l0.049-0.016h0.016l0.049,0.032h0.049l0.146,0.016 l0.032-0.016l0.113-0.049L21.751,3.785L21.751,3.785L21.751,3.785z">
  </path>
</svg></span>
  
  <strong class="md:text-sm font-semibold">
    Florida
    
  </strong>
  
  
</a> 
        <a 
  href="/northcarolina" 
  class="nav-item group flex no-underline py-1.5 px-3 rounded focus:outline focus:outline-2 focus:outline-blue focus:outline-offset-2 border-2 border-transparent hover:border-white/75 hover:bg-white/10 items-center gap-2 text-white/80 hover:text-white select-none "
  
  title="/relationsindex | /northcarolina"
>
  
    <span class="size-5 fill-current"><svg fill="fillCurrent" xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 30 30">
  <path
    d="M27.526,8.434l0.519-0.104l0.087-0.035v0.017l0.017,0.052v0.087v0.069l0.052,0.087l0.087,0.069 l0.087,0.052l0.087,0.035l-0.052,0.052l0.052,0.087l0.121,0.104l0.087,0.035l-0.052-0.035l-0.017-0.034l-0.017-0.035l-0.017-0.035 l0.017-0.052V8.745h0.052l0.035,0.104l0.017,0.208l0.052,0.069l0.138,0.138l0.052,0.069l0.017,0.052l0.294,0.467l0.035,0.052 l0.035,0.087l0.069,0.087l0.034,0.069l-0.052,0.035l-0.069-0.017l-0.069-0.052L29.1,10.009l-0.017-0.035V9.939V9.887V9.853 l-0.017-0.035l-0.034-0.052l-0.052-0.052l-0.087-0.052l-0.034-0.017l-0.017-0.035V9.559l-0.017-0.035l-0.069-0.017L28.702,9.49 l-0.017-0.035l0.017-0.087l-0.104-0.069l-0.069-0.017L28.46,9.299l0.052,0.052l0.052,0.017l0.035,0.035l0.069,0.156l0.035,0.087 l0.017,0.052l-0.034,0.052l0.104,0.069l0.069,0.017l0.052,0.017V9.87l-0.26-0.017h-0.069h-0.087l-0.069-0.052L28.322,9.68 l-0.035-0.017h-0.069l-0.035-0.017l-0.087-0.052l-0.069-0.052l-0.069-0.017l-0.19-0.017l0.017-0.035l0.017-0.035V9.42l-0.052-0.017 l-0.017,0.034l-0.017,0.069l-0.017,0.052l0.017,0.017h0.087l0.087,0.034l0.087,0.035l0.052,0.052l0.087,0.087l0.035,0.052 l0.104,0.017l0.052,0.104l0.052,0.017h0.035l-0.017,0.035l-0.069,0.069l-0.035,0.017l-0.121,0.034v0.035h0.035v0.017l-0.104,0.034 h-0.035H28.01l-0.138-0.052l-0.069-0.087l-0.035-0.017h-0.034L27.63,9.991l-0.069-0.035h-0.035l0.017,0.052l0.035,0.034l0.035,0.035 l0.035,0.017l0.034,0.017l0.052,0.017l0.156,0.156l0.069,0.052l0.017,0.017l-0.087,0.034h-0.087l-0.398-0.087l-0.121-0.034 l-0.069-0.087l-0.052,0.017l-0.069-0.017l-0.087-0.052l-0.069-0.017l0.069,0.087l0.035,0.035l0.034,0.035l0.139,0.034l0.034,0.035 l0.035,0.035l0.104,0.035l0.104,0.035h0.069l0.017,0.035l-0.346,0.121l-0.052,0.052l0.017,0.034l0.035-0.017L27.18,10.77 l-0.087,0.104l-0.104,0.069l-0.087,0.035l-0.121,0.035l-0.069,0.017l-0.035-0.017l-0.138-0.138l-0.035-0.017L26.47,10.96 l-0.087,0.017l-0.087-0.052l-0.104-0.225l-0.121-0.19l-0.035-0.104v-0.208l0.017-0.052l0.034-0.069l0.017-0.034l0.017-0.139 l-0.052-0.069l-0.069-0.035h-0.087l0.035,0.035l0.069,0.069l0.017,0.035v0.052v0.052l-0.052,0.052l-0.035,0.104l-0.017,0.087v0.087 l0.052,0.294l0.017,0.035l0.069,0.087l0.052,0.121l0.035,0.034l0.035,0.035l0.035,0.017l0.017,0.052l0.017,0.052l0.017,0.035h0.052 v0.069l-0.087,0.19v0.035l0.484-0.104l0.104,0.017h0.017l0.104-0.104l0.173-0.104l0.173-0.087l0.121,0.017l0.017,0.035v0.052v0.035 l0.017,0.035l0.017,0.017l0.035-0.017l0.017-0.035l0.035-0.035h0.087l0.156,0.052l0.087-0.017l-0.052-0.052l-0.087-0.017 l-0.035-0.052l0.069-0.087l0.277-0.138l0.329-0.104h0.087l0.121,0.034l0.069,0.052l0.017,0.069l-0.087-0.035l-0.035,0.052v0.156 l0.121-0.069l0.035-0.017v0.104l-0.035,0.087l-0.052,0.087l-0.069,0.034v0.017l0.104,0.052l0.069,0.121V11.6l-0.087,0.052 l-0.104-0.017h-0.052l0.035,0.052l0.052,0.017l0.069,0.017h0.052l0.052-0.017l-0.017,0.017l0.035,0.017l0.035,0.035l0.035,0.052 l-0.017,0.035l-0.035,0.034l0.035,0.052l0.052,0.034l0.017,0.017l-0.052,0.069h-0.104l-0.121-0.017l-0.087,0.017l0.087,0.104 l0.087,0.017l0.104-0.035l0.087-0.034v0.017v0.017l0.017,0.017l0.035,0.035l0.017-0.017l0.052-0.363l-0.017-0.156l-0.104-0.536 l0.017-0.035l0.087-0.104l0.017-0.035l0.035-0.017l0.052,0.035l0.087,0.087l0.104,0.035h0.017l0.034-0.017v-0.035l-0.017-0.035 l-0.087-0.017l-0.035-0.035l-0.052-0.052l-0.035-0.052h0.087l0.069,0.017h0.087l0.052-0.052l-0.035-0.017l-0.035-0.017h-0.034 l-0.052,0.017l0.017-0.052l0.017-0.035v-0.035l-0.017-0.052l0.138,0.069l0.121,0.087l0.225,0.242l0.017,0.052l0.087,0.087 l0.017,0.017l0.017,0.087l-0.017,0.069l-0.017,0.069v0.069l0.017,0.035l0.069,0.069l0.017,0.052L30,11.721l-0.017,0.035 l-0.087,0.017l-0.087,0.034l0.017,0.017l0.052,0.087l0.104,0.104L30,12.05l-0.035,0.104l-0.017,0.017l-0.017,0.017l-0.017,0.017 l-0.035,0.017v0.035l0.017,0.052v0.017l-0.035,0.034l-0.052,0.017l-0.104,0.035v-0.035l0.035-0.035l0.017-0.017V12.31l-0.017-0.017 l-0.017-0.017l-0.069,0.052l-0.069-0.017l-0.052-0.069l-0.052-0.104l-0.017,0.087l0.017,0.069l0.017,0.069v0.035l-0.156,0.26 l-0.017,0.017l-0.069,0.017v0.035l0.017,0.017l0.017,0.035l0.017,0.017v0.017l-0.017,0.035l-0.017,0.017l-0.087,0.052l0.035,0.069 v0.035l-0.035,0.034l-0.017,0.035l0.017,0.069v0.035l-0.035,0.017l-0.035-0.035l0.017-0.035l-0.069-0.017l-0.035,0.069v0.104 l0.052,0.052v0.017l-0.052,0.017l-0.121,0.087l-0.035,0.035l-0.034,0.069l-0.017,0.017l-0.242,0.052h-0.069l-0.052-0.087h-0.035 l-0.017,0.017v0.052v0.052h-0.052l-0.121-0.052l-0.069-0.104l-0.035-0.035l-0.087-0.017l-0.035,0.035l0.017,0.052l0.017,0.035 l0.017,0.035l0.035,0.052v0.069l-0.069,0.035l-0.017-0.035l-0.069-0.034h-0.035h-0.017h-0.017l-0.035-0.035l0.138-0.035v-0.035 l-0.034-0.035l-0.035-0.069l-0.035-0.139l-0.035-0.069l-0.069-0.017l-0.035,0.052l0.052,0.069l-0.052,0.173l-0.035-0.017h-0.052 l-0.035,0.017l-0.017,0.052h0.034l0.017,0.017l0.035,0.035l0.017,0.017l-0.138-0.035l-0.069-0.035l-0.052-0.052l0.035-0.017 l0.017-0.017v-0.017v-0.035l-0.156-0.017l-0.052-0.035l0.035-0.069v-0.017l-0.087-0.035l-0.052-0.052l0.017-0.052l0.087-0.035 l0.173-0.017l0.052-0.035l0.034-0.138l-0.087,0.034l-0.087,0.017l-0.173-0.017l-0.087,0.017l-0.069,0.052l-0.121,0.121h0.052 l0.052,0.017l0.035,0.035l0.017,0.035L27.059,13.4v0.035l0.069,0.035l0.017,0.017l0.035,0.017v0.017l-0.017,0.017v0.017 l-0.017,0.017v0.017l0.035,0.017l0.035,0.017l0.017,0.017l0.035,0.017l-0.069,0.052h-0.104l-0.087-0.052l-0.017-0.087h-0.035 l-0.017,0.017l-0.017,0.035l-0.017,0.017h-0.104l-0.19,0.087l-0.087-0.017l-0.087-0.069l-0.069-0.017l-0.19,0.017l-0.104-0.017 l-0.19-0.052l-0.173-0.017l-0.069-0.035l-0.156-0.087l0.087,0.121l0.035,0.052l0.052,0.017h0.069l0.052,0.052l0.052,0.121 l0.104-0.087l0.138,0.017l0.173,0.052l0.121,0.069l0.069,0.017l0.208,0.017l0.26,0.087h0.294l0.346,0.052l0.087-0.017l0.017,0.052 l0.035,0.034l0.069,0.052l0.017,0.017l-0.035,0.087v0.052l-0.017,0.052l-0.069,0.017h-0.19v0.035l0.087,0.017l0.052,0.017 l0.034,0.035l-0.017,0.035H27.56l-0.104-0.017l-0.052,0.034l-0.034,0.035l-0.035,0.035l-0.017,0.017l-0.052,0.017l-0.052,0.035 l-0.052,0.034l-0.035,0.052h0.052l0.156-0.017l0.035,0.017l0.052,0.017h0.035l0.052-0.035h-0.017l-0.017-0.017h-0.017l-0.017-0.035 l0.052-0.035l0.087,0.104v0.121l-0.069,0.087l-0.104,0.069l0.034,0.069l-0.104,0.121l-0.138,0.121l-0.052,0.069l-0.052,0.121 l-0.121,0.069l-0.156,0.035h-0.104l-0.139-0.035l-0.121-0.069l-0.19-0.139l-0.052-0.017l-0.138-0.035l-0.225-0.208l-0.139-0.034 l0.208,0.225l0.017,0.035l0.069,0.017l0.069,0.069l0.121,0.173l0.173,0.156l0.156,0.035h0.156l0.19,0.017l0.138,0.069l0.017,0.017 l0.035,0.017l0.017,0.017l0.017-0.017l0.035-0.052l0.087-0.052l0.035-0.069l0.052-0.087l0.052-0.069l0.052-0.069l0.034-0.017h0.052 l0.034,0.017l0.035,0.034l0.035,0.035v0.017l0.069,0.017l0.104,0.035l0.052,0.017l-0.035-0.087l-0.104-0.104l-0.017-0.052 l0.069-0.052h0.052h0.052l0.052,0.017l0.069,0.069l0.017-0.069l-0.017-0.069l-0.017-0.052v-0.052v-0.069l0.035-0.087l0.017-0.069 h0.017l0.017,0.017l0.052,0.052v0.017v0.035v0.069v0.052l0.087,0.069l0.035,0.035l-0.017,0.035l-0.087,0.069h-0.017l-0.017,0.017 l-0.017,0.034v0.035l0.017,0.035h0.017l0.035,0.017l0.052-0.017l0.138-0.087h0.035l0.017-0.069l0.069-0.052l0.087-0.017l0.035-0.017 l-0.035-0.069l-0.069-0.069l-0.052-0.069l0.121,0.017l0.069,0.052l0.069,0.069l0.087,0.035v0.034l-0.017,0.035l-0.035,0.069 l-0.034,0.035l-0.052,0.017h-0.052h-0.035v0.087l0.017,0.035l0.035,0.017v0.035l-0.017,0.087l-0.017,0.035l-0.138,0.087v-0.017 l-0.035-0.035v-0.035h-0.017l-0.017,0.052l0.017,0.069v0.035l-0.017,0.052l-0.017,0.035l-0.035,0.052l-0.087,0.173l-0.035,0.035 l-0.017,0.017l-0.017,0.017l-0.017,0.052v0.017l0.017,0.017l0.017,0.035l-0.017,0.035l-0.017,0.035l-0.035,0.017l-0.087,0.017 l-0.069-0.017l-0.087-0.035l-0.017-0.069l0.035-0.069l-0.087-0.052l-0.069-0.069h-0.034l0.052,0.381l-0.017,0.104l-0.087-0.052 L27.543,16.6l-0.035-0.121l-0.034-0.087l-0.052-0.035l-0.087,0.035l-0.069,0.069l-0.069,0.069l-0.035,0.087l0.052-0.017l0.035-0.017 l0.017-0.017l0.034-0.035l0.104,0.104l0.017,0.052l-0.692,0.087l-0.104,0.104l-0.484,0.26l-0.017,0.017l-0.035,0.035l-0.052-0.017 v-0.052l0.052-0.052l-0.104-0.104l-0.052-0.104v-0.017h-0.069l0.017,0.069l0.034,0.069l0.035,0.017v0.069v0.069l-0.035,0.052 l-0.034,0.035h-0.017l-0.035-0.035l-0.017-0.017l-0.035,0.017v0.017l0.052,0.069l-0.017,0.035l-0.087,0.069l-0.138,0.277 l-0.087,0.087l-0.052,0.017l-0.069,0.069l-0.069,0.035l-0.087-0.052h-0.017l-0.017-0.017h-0.121l0.035-0.087l0.121-0.138 l0.034-0.087l-0.052-0.052l-0.156-0.156l-0.069-0.035v-0.017l0.052-0.017v-0.017L25,17.154l-0.052-0.034l-0.017,0.017l-0.035,0.017 h-0.052l-0.052-0.052l0.069,0.225l0.052,0.052l0.035-0.035L25,17.379l0.052,0.052l0.017,0.052l0.017,0.104l-0.035,0.069L25,17.673 h-0.035l-0.017-0.017l-0.035,0.017l-0.035,0.017v0.052l0.017,0.017l0.035,0.052l0.052,0.035l0.035,0.017h0.069l0.069,0.035 l0.035,0.034l-0.035,0.052v0.034h0.017l0.017,0.017l-0.017,0.035l-0.052,0.034l-0.19,0.087L24.688,18.4l-0.398,0.502l-0.173,0.294 l-0.138,0.346l-0.087,0.121l-0.052,0.087l-0.017,0.139l-0.052,0.173v0.087l0.017,0.484l-0.017,0.242l-0.087,0.156l0.017-0.087 v-0.052l-0.034-0.017v-0.034l0.034-0.139l-0.104-0.329l0.017-0.138l-0.104-0.156l-0.104-0.173h-0.017l0.017,0.121l0.104,0.311 l0.052,0.087v0.069v0.069l0.035,0.156v0.052l-0.035,0.173l-0.104,0.242l-0.017,0.034l-0.052,0.035h-0.069l-0.329-0.035l-0.087,0.017 l-0.19,0.035l-0.052-0.017h-0.087l-0.294,0.121h-0.121l0.017-0.035v-0.035l-0.052-0.087l-0.017,0.017l-0.017,0.121l-0.069,0.069 l-0.225,0.104l-0.294,0.173l0.034-0.052l0.017-0.017l-0.017-0.017l-0.087,0.034l-0.277-0.19l-0.294-0.19l-0.277-0.208l-0.277-0.19 l-0.277-0.207l-0.277-0.19l-0.277-0.208l-0.277-0.19l-0.277-0.208l-0.277-0.19l-0.277-0.207l-0.277-0.19 l-0.277-0.208l-0.26-0.207l-0.138-0.087l-0.087-0.017h-0.104l-0.138,0.017h-0.035L16.384,18.4l-0.173,0.035l-0.225,0.035 l-0.277,0.034l-0.294,0.052l-0.329,0.034l-0.329,0.052l-0.329,0.052L14.1,18.746l-0.294,0.035l-0.277,0.035l-0.225,0.034 l-0.173,0.035H13.01l-0.034,0.017l-0.139,0.017h-0.034l-0.017-0.017l-0.017-0.035v-0.035l-0.069-0.45v-0.035l-0.017-0.017 l-0.19-0.173l-0.242-0.242l-0.156-0.138l-0.017-0.017h-0.017l-0.017,0.017l-0.277,0.26h-0.017H11.73l-0.017-0.017l-0.017-0.017 l-0.017-0.017l-0.017-0.017V17.95v-0.017v-0.017v-0.017l0.035-0.087v-0.034v-0.017l-0.017-0.017v-0.017l-0.017-0.017V17.69 l-0.017-0.017l-0.017-0.017h-0.035H11.54l-0.225,0.017l-0.173,0.017l-0.225,0.034l-0.277,0.017l-0.277,0.035l-0.311,0.034 l-0.329,0.017l-0.329,0.035l-0.329,0.034l-0.329,0.035l-0.294,0.035l-0.277,0.017l-0.242,0.017l-0.19,0.035H7.578l-0.104,0.017 H7.439l-0.26,0.017L6.92,18.14H6.903H6.886v-0.017l-0.035-0.017v-0.017l-0.017-0.017H6.799l-0.017,0.017L6.73,18.14l-0.017,0.017 l-0.017,0.035v0.069l-0.017,0.017l-0.035,0.017l-0.121,0.017H6.505l-0.035,0.035l-0.017,0.017l-0.017,0.017L6.419,18.4l-0.121,0.017 H6.263L6.09,18.504L5.986,18.59l-0.035,0.017H5.917H5.882l-0.035,0.017L5.83,18.642l-0.017,0.035v0.052l-0.017,0.017L5.761,18.78 L5.675,18.85L5.64,18.867l-0.035,0.035H5.588H5.571l-0.017-0.017L5.536,18.85l-0.121,0.034l-0.986,0.502H4.36l-0.277,0.052 l-0.26,0.035l-0.277,0.035L3.27,19.559l-0.26,0.035l-0.277,0.035L2.457,19.68l-0.26,0.035L1.92,19.749l-0.26,0.035l-0.277,0.035 L1.107,19.87l-0.26,0.035L0.571,19.94l-0.277,0.035l-0.26,0.035l-0.017-0.208v-0.208L0,19.351v-0.173V19.04v-0.035v-0.035 l0.017-0.034l0.035-0.052l0.052-0.069l0.035-0.035l0.017-0.017l0.052-0.017h0.035H0.26l0.034,0.017l0.017,0.017h0.017l0.035,0.017 l0.052-0.017l0.19-0.035l0.087-0.017h0.017l0.017-0.017l0.035-0.034l0.052-0.087l0.035-0.035v-0.052v-0.139v-0.017v-0.052 l0.017-0.017l0.052-0.104v-0.017v-0.035v-0.017v-0.017L0.9,18.019v-0.017v-0.017l0.017-0.035l0.069-0.087l0.017-0.035l0.034-0.017 l0.139-0.069l0.017-0.017l0.035-0.035v-0.035l0.052-0.121l0.017-0.017L1.332,17.5l0.052-0.035l0.104-0.034l0.034-0.017l0.035-0.035 l0.052-0.052l0.069-0.052l0.069-0.035l0.069-0.035h0.017h0.138v-0.017h0.017l0.035-0.017h0.017l0.035-0.017l0.017,0.017h0.017 l0.035-0.017H2.18l0.069-0.035h0.035h0.035l0.017,0.017l0.017,0.017H2.37h0.035h0.017l0.225-0.069l0.017-0.017l0.035-0.017 l0.069-0.087l0.017-0.052l0.034-0.035l0.017-0.017l0.19-0.104l0.035-0.052l0.035-0.052L3.149,16.6l0.017-0.017l0.052-0.017h0.017 H3.27h0.017l0.035-0.017l0.052-0.104l0.069-0.087v-0.017l0.035-0.017l0.017-0.017l0.087-0.052l0.035-0.035l0.069-0.087l0.017-0.017 l0.035-0.017l0.121-0.052l0.173-0.121l0.017-0.017h0.017H4.1h0.156h0.052h0.017l0.035-0.035l0.069-0.121l0.069-0.138l0.017-0.035 v-0.035V15.51l0.017-0.034l0.035-0.052v-0.034v-0.017l-0.052-0.069v-0.017l-0.017-0.017v-0.035v-0.017l0.017-0.017v-0.035 l0.017-0.017L4.55,15.13l0.017-0.017l0.052-0.017h0.035h0.035l0.052,0.017l0.052,0.017l0.035,0.034h0.035h0.017l0.017-0.017 l0.017-0.035v-0.035l0.017-0.035l0.035-0.052v-0.017l0.017-0.035l-0.017-0.052V14.87v-0.017h0.017l0.225-0.173l0.069-0.052 l0.156-0.104l0.034-0.017h0.035l0.017,0.017l0.069,0.087v0.017v0.017l-0.017,0.052v0.035v0.035l0.017,0.017l0.017,0.052l0.017,0.017 L5.64,14.87l0.017,0.017l0.017,0.017h0.017h0.035h0.017h0.017l0.035-0.017l0.156-0.138l0.017-0.017l0.017-0.017l0.035-0.035 l0.052-0.104v-0.017l0.035-0.121l0.035-0.052l0.104-0.156l0.052-0.052l0.052-0.035l0.034-0.017l0.121-0.052l0.087-0.052l0.017-0.017 h0.087l0.017-0.017l0.087-0.104l0.035-0.017h0.035h0.017l0.052,0.017h0.017h0.017h0.052h0.017l0.017,0.017h0.017l0.017,0.017 l0.017,0.017v0.017l0.017,0.017v0.017l0.017,0.017v0.017l0.017,0.017l0.035,0.017h0.017h0.052h0.035h0.017l0.034-0.017l0.035-0.017 l0.052-0.069l0.017-0.017l0.035-0.035l0.034-0.052l0.242-0.727l0.017-0.017l0.087-0.087l0.242-0.225l0.017-0.017h0.017l0.19,0.035 H8.46v-0.017h0.017L8.46,12.76v-0.017L8.391,12.69l-0.052-0.069v-0.017v-0.035v-0.034l0.069-0.208l0.035-0.173l-0.017-0.035 l-0.069-0.104v-0.017l0.017-0.087L8.495,11.6l0.035,0.052l0.017,0.017h0.017l0.087-0.017l0.606-0.087l0.606-0.087l0.623-0.087 l0.606-0.087l0.606-0.104l0.623-0.087l0.606-0.087l0.606-0.104l0.606-0.104l0.623-0.087l0.606-0.104l0.606-0.104l0.606-0.104 l0.623-0.087l0.606-0.104l0.606-0.104l0.606-0.104l0.606-0.121l0.623-0.104l0.606-0.104l0.606-0.104l0.606-0.121l0.606-0.104 l0.606-0.121l0.606-0.121l0.623-0.104l0.606-0.121l0.606-0.121l0.606-0.121l0.606-0.104L27.526,8.434L27.526,8.434z">
  </path>
</svg></span>
  
  <strong class="md:text-sm font-semibold">
    North Carolina
    
  </strong>
  
  
</a> 
        <a 
  href="/pennsylvania" 
  class="nav-item group flex no-underline py-1.5 px-3 rounded focus:outline focus:outline-2 focus:outline-blue focus:outline-offset-2 border-2 border-transparent hover:border-white/75 hover:bg-white/10 items-center gap-2 text-white/80 hover:text-white select-none "
  
  title="/relationsindex | /pennsylvania"
>
  
    <span class="size-5 fill-current"><svg class="opacity-80 group-hover:opacity-100" xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" width="24"
          height="24" viewBox="0 0 30 30">
          <path
            d="M28.065,17.222l-0.047,0.047l-0.14,0.117l-0.094,0.047l-0.117,0.187l-0.093,0.047l-0.07,0.047 l-0.047,0.117l0.023,0.14l0.047,0.117l-0.047,0.07l-0.257,0.164l-0.164,0.14l-0.094,0.047l-0.117-0.023l-0.257,0.21l-0.07,0.024 l-0.07,0.047l-0.07,0.187l-0.093-0.047l-0.14-0.047l-0.187-0.023h-0.21l-0.211,0.07l-0.094,0.023L25.304,19l-0.07,0.07l-0.07,0.093 l-0.07,0.094l-0.07,0.21l-0.07,0.187l-0.07,0.187H24.86l-0.538,0.117l-0.514,0.117l-0.515,0.093l-0.515,0.117l-0.515,0.117 l-0.515,0.094l-0.515,0.117l-0.538,0.117l-0.515,0.094l-0.514,0.117l-0.515,0.093l-0.515,0.094l-0.515,0.117l-0.538,0.093 l-0.515,0.117l-0.515,0.094l-0.514,0.094l-0.538,0.117l-0.514,0.093l-0.515,0.094l-0.515,0.093l-0.515,0.117l-0.538,0.094 l-0.515,0.094l-0.515,0.093l-0.514,0.094l-0.538,0.093l-0.514,0.094l-0.515,0.094l-0.538,0.093L8.743,23l-0.515,0.093l-0.585,0.094 l-0.585,0.117l-0.608,0.094l-0.585,0.093l-0.585,0.117l-0.585,0.094l-0.585,0.093l-0.608,0.094l-0.047-0.398l-0.07-0.421 l-0.07-0.421l-0.07-0.398l-0.07-0.468l-0.094-0.491l-0.07-0.468l-0.07-0.468l-0.094-0.468l-0.07-0.491l-0.07-0.468l-0.094-0.468 v-0.023L2.52,17.807l-0.117-0.608L2.31,16.567l-0.094-0.608l-0.117-0.632l-0.093-0.608l-0.094-0.632L1.795,13.48l-0.094-0.608 L1.608,12.24l-0.117-0.608L1.398,11l-0.094-0.608L1.187,9.76L1.094,9.152L1,8.52l0.047-0.023l0.562-0.211l0.538-0.187l0.608-0.445 l0.608-0.444l0.632-0.421l0.094-0.07l0.023,0.187l0.047,0.211l0.023,0.187l0.047,0.211l0.024,0.21l0.023,0.187l0.047,0.21 L4.345,8.31l0.047,0.187l0.023,0.164l0.024,0.164l0.023,0.187l0.047,0.164l0.023,0.164l0.024,0.187L4.602,9.69l0.023,0.187 L4.79,9.854L5.374,9.76l0.608-0.117L6.567,9.55l0.608-0.117L7.76,9.339l0.608-0.117l0.585-0.094l0.585-0.117l0.608-0.117 l0.585-0.093l0.608-0.117l0.585-0.117l0.585-0.117l0.608-0.094l0.585-0.117l0.608-0.117l0.585-0.117l0.585-0.117l0.608-0.117 l0.585-0.117l0.585-0.14l0.608-0.117l0.585-0.117l0.585-0.117l0.608-0.117l0.585-0.14l0.585-0.117l0.585-0.117l0.608-0.14 l0.585-0.117l0.585-0.14l0.585-0.117l0.117-0.024l0.047-0.023l0.023,0.093l0.117,0.047l0.14,0.047l0.117,0.047l0.047,0.093 l0.047,0.14l0.047,0.117l0.07,0.047l0.234-0.094h0.07l0.117,0.07l0.117,0.024l0.094,0.093l0.047,0.024h0.07l-0.024,0.047 l-0.07,0.164l0.117,0.024l0.07,0.023l0.07,0.023l0.047,0.14v0.047l-0.047,0.07v0.047l0.093,0.21l0.024,0.117l0.047,0.304l0.024,0.07 l0.07,0.047l0.328,0.421l0.093,0.07l0.07,0.047l0.211,0.023l0.07,0.023l0.047,0.07l0.094,0.047h0.093l0.211-0.07l0.117,0.024 l0.047,0.047h0.047l0.047-0.047l0.047-0.024l0.047,0.024l0.023,0.047l0.047,0.07l0.07,0.047l0.094,0.117l0.047,0.117l-0.07,0.07 l-0.094,0.047l-0.047,0.024l-0.047,0.07h-0.047l-0.024,0.023v0.024l-0.023,0.07v0.023l-0.187,0.281v0.07v0.047v0.164l-0.047,0.281 l-0.164,0.374l-0.047,0.047l-0.023,0.023l-0.047,0.047l-0.023,0.047L26.638,11l0.024,0.07v0.023h-0.024l-0.117,0.281l-0.07,0.07 l-0.093,0.07l-0.07,0.024l-0.07,0.093l-0.093,0.117L26.1,11.865l0.024,0.024l0.047,0.047l0.047,0.07l0.024,0.023v0.023v0.024h0.023 h0.023h0.024h0.023l0.023,0.047l0.047,0.047l0.07,0.047l0.094,0.094l0.047,0.117l-0.024,0.093l-0.047,0.07l-0.047,0.07v0.14v0.117 l-0.07,0.07l-0.07,0.024l-0.093-0.024l-0.024,0.117l-0.023,0.047l-0.023,0.024l-0.024,0.023l0.024,0.047l0.023,0.047h0.023 l-0.023,0.187v0.07l0.023,0.07l0.024,0.07v0.047l0.023,0.047l0.047,0.187v0.07l0.023,0.047l0.024,0.07l0.07,0.14l0.07,0.023 l0.117-0.07l0.234,0.023l0.117,0.14l0.14,0.444l0.07,0.094l0.093,0.117l0.117,0.047L27.573,15l0.07,0.093l0.117,0.211l0.281,0.164 l0.047,0.047l0.023,0.023l0.211,0.187l0.164,0.14l0.304,0.14l0.14,0.094L29,16.216l-0.023,0.14l-0.117,0.117l-0.14,0.07 l-0.117,0.047l-0.024,0.023l-0.117,0.187l-0.047,0.023l-0.164,0.094l-0.047,0.07L28.065,17.222L28.065,17.222z">
          </path>
        </svg></span>
  
  <strong class="md:text-sm font-semibold">
    Pennsylvania
    
  </strong>
  
  
</a> 
      </div>
    </div>
    <div class="flex flex-col gap-0.5">
      <a 
  href="/donate" 
  class="nav-item group flex no-underline py-1.5 px-3 rounded focus:outline focus:outline-2 focus:outline-blue focus:outline-offset-2 border-2 border-transparent hover:border-white/75 hover:bg-white/10 flex-col text-white select-none !border-green-light bg-green-light/20 hover:!bg-green-light hover:text-navy relative [&_.right-icon]:text-green-light"
  
  title="/relationsindex | /donate"
>
  
  <strong class="md:text-sm">
    Donate
    
  </strong>
  
    <span class="opacity-70 text-sm font-normal md:text-[13px]">Help support our work</span>
  
  
    <span class="right-icon inline-block absolute right-2 top-[calc(50%-0.75rem)] size-6 group-hover:text-navy"><svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 24 24"><path fill-rule="evenodd" d="M8.667 3.5a.917.917 0 0 0-.917.917A2.583 2.583 0 0 0 10.333 7h.917v-.917A2.583 2.583 0 0 0 8.667 3.5ZM12 3.724A4.078 4.078 0 0 0 8.667 2 2.417 2.417 0 0 0 6.25 4.417c0 .98.345 1.88.92 2.583H4.75A1.75 1.75 0 0 0 3 8.75V11c0 .698.409 1.3 1 1.582v6.668c0 .966.784 1.75 1.75 1.75h12.5A1.75 1.75 0 0 0 20 19.25v-6.668c.591-.281 1-.884 1-1.582V8.75A1.75 1.75 0 0 0 19.25 7h-2.42c.575-.704.92-1.603.92-2.583A2.417 2.417 0 0 0 15.333 2C13.957 2 12.74 2.68 12 3.724Zm.75 4.776v2.75h6.5a.25.25 0 0 0 .25-.25V8.75a.25.25 0 0 0-.25-.25h-6.5Zm-1.5 2.75V8.5h-6.5a.25.25 0 0 0-.25.25V11c0 .138.112.25.25.25h6.5Zm0 1.5v6.75h-5.5a.25.25 0 0 1-.25-.25v-6.5h5.75Zm1.5 6.75v-6.75h5.75v6.5a.25.25 0 0 1-.25.25h-5.5Zm0-12.5h.917a2.583 2.583 0 0 0 2.583-2.583.917.917 0 0 0-.917-.917 2.583 2.583 0 0 0-2.583 2.583V7Z" clip-rule="evenodd"/></svg></span>
  
</a> 
      <a 
  href="https://x.com/datarepublican" 
  class="nav-item group flex no-underline py-1.5 px-3 rounded focus:outline focus:outline-2 focus:outline-blue focus:outline-offset-2 border-2 border-transparent hover:border-white/75 hover:bg-white/10 flex-col text-white select-none relative "
  target="_blank"
  title="/relationsindex | /https:x.comdatarepublican"
>
  
  <strong class="md:text-sm">
    Follow on X
    
  </strong>
  
    <span class="opacity-70 text-sm font-normal md:text-[13px]">@datarepublican</span>
  
  
    <span class="right-icon inline-block absolute right-2 top-[calc(50%-0.75rem)] size-6 "><svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 24 24"><path d="M17.169 4h2.747l-6 6.904L21 20.265h-5.566l-4.338-5.675-4.988 5.675H3.361l6.434-7.373L3 4h5.71l3.94 5.205L17.17 4Zm-.976 14.602h1.518L7.88 5.554H6.217l9.976 13.048Z"/></svg></span>
  
</a> 
      <a 
  href="/christianity" 
  class="nav-item group flex no-underline py-1.5 px-3 rounded focus:outline focus:outline-2 focus:outline-blue focus:outline-offset-2 border-2 border-transparent hover:border-white/75 hover:bg-white/10 flex-col text-white select-none "
  
  title="/relationsindex | /christianity"
>
  
  <strong class="md:text-sm">
    The historical case for Christianity
    
  </strong>
  
  
</a> 
    </div>
      

    </div>
  </div>
    <div class="border-t border-white/25 hover:border-white/50 hidden md:block">
    <button id="collapse-button" class="frameless flex items-center gap-1 text-sm !text-opacity-75 hover:!text-opacity-100 !text-white !p-2 !pr-4 justify-center w-full" aria-label="Collapse menu" aria-expanded="true">
      <span class="size-4"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="m10 16-3.47-3.47a.75.75 0 0 1 0-1.06L10 8m7 8-3.47-3.47a.75.75 0 0 1 0-1.06L17 8"/></svg></span>
      Collapse menu
    </button>
    <button id="expand-button" class="frameless flex items-center gap-1 text-sm !text-opacity-75 hover:!text-opacity-100 !text-white hidden" aria-label="Expand menu" aria-expanded="false">
      <span class="size-4"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><path fill="currentColor" fill-rule="evenodd" d="M2 5.75A.75.75 0 0 1 2.75 5h18.5a.75.75 0 0 1 0 1.5H2.75A.75.75 0 0 1 2 5.75ZM2 12a.75.75 0 0 1 .75-.75h18.5a.75.75 0 0 1 0 1.5H2.75A.75.75 0 0 1 2 12Zm0 6.25a.75.75 0 0 1 .75-.75h18.5a.75.75 0 0 1 0 1.5H2.75a.75.75 0 0 1-.75-.75Z" clip-rule="evenodd"/></svg></span>
    </button>
  </div>
</header>

<script>
  $(document).ready(function() {
    const $menuButton = $('#mobile-menu-button');
    const $menuItems = $('#menu-items');
    const $header = $('header');
    const $menuIcon = $menuButton.find('.menu-icon');
    const $closeIcon = $menuButton.find('.close-icon');
    const $menuText = $menuButton.find('.menu-text');
    
    // New elements for collapse/expand functionality
    const $collapseButton = $('#collapse-button');
    const $expandButton = $('#expand-button');
    const $expandButtonContainer = $('#expand-button-container');
    const $menuContents = $('#menu-contents');
    const $mainContent = $('body > div');
    
    // Check if the header is already collapsed from the inline script
    const isInitiallyCollapsed = $header.hasClass('collapsed');
    
    // Set initial state of buttons and menu contents based on header state
    if (isInitiallyCollapsed && window.innerWidth >= 768) {
      $menuContents.addClass('hidden');
      $collapseButton.addClass('hidden');
      $expandButtonContainer.addClass('md:flex');
      $expandButtonContainer.removeAttr('style');
      $mainContent.addClass('menu-collapsed');
    } else {
      $expandButtonContainer.addClass('hidden');
      
      // If on mobile, ensure menu is expanded regardless of localStorage
      if (window.innerWidth < 768) {
        $header.removeClass('collapsed');
        $menuContents.removeClass('hidden');
        $mainContent.removeClass('menu-collapsed');
      }
    }
    
    // Function to handle dropdown menus
    function setupDropdowns() {
      const $dropdownButtons = $('.nav-dropdown-button');
      const hasActiveButton = $dropdownButtons.hasClass('is-active');
      
      // If no active buttons, show all at full opacity
      if (!hasActiveButton) {
        $dropdownButtons.removeClass('opacity-75').addClass('opacity-100');
      } else {
        // Otherwise, set non-active buttons to reduced opacity
        $('.nav-dropdown-button:not(.is-active)').addClass('opacity-75 hover:opacity-100');
      }
      
      $dropdownButtons.each(function() {
        const $button = $(this);
        const $content = $('#' + $button.attr('id').replace('-button', ''));
        const $chevron = $button.find('span:last-child');
        
        // Make sure content exists before trying to manipulate it
        if ($content.length === 0) {
          console.warn('Dropdown content not found for button:', $button.attr('id'));
          return;
        }
        
        // Check if we're on a page that should have this dropdown expanded
        const isActive = $button.hasClass('is-active');
        
        // Set initial state
        if (isActive) {
          $content.addClass('expanded');
          $chevron.toggleClass('rotate-90 -rotate-90');
          $button.removeClass('opacity-75').addClass('opacity-100');
        } else {
          $content.removeClass('expanded');
        }
        
        // Add click event
        $button.on('click', function(e) {
          e.preventDefault();
          const isExpanded = $content.hasClass('expanded');
          
          // Toggle the dropdown
          if (isExpanded) {
            $content.removeClass('expanded');
          } else {
            $content.addClass('expanded');
          }
          
          // Toggle the chevron rotation classes
          $chevron.toggleClass('rotate-90 -rotate-90');
          
          // Toggle opacity class based on expanded state
          if (isExpanded) {
            // Only add opacity if there's an active button somewhere
            if (hasActiveButton) {
              $button.addClass('opacity-75 hover:opacity-100');
            }
          } else {
            $button.removeClass('opacity-75').addClass('opacity-100');
          }
        });
      });
    }
    
    // Initialize dropdowns
    setupDropdowns();

    // Function to update menu position and height
    function updateMenuPosition() {
      const headerHeight = $header.outerHeight();
      document.documentElement.style.setProperty('--header-height', headerHeight + 'px');
      
      if (window.innerWidth < 768) { // Only set these on mobile
        $menuItems
          .css('height', `calc(100vh - ${headerHeight}px)`);
      } else {
        // Reset styles on desktop
        $menuItems
          .css('height', '');
      }
    }
    
    // Update position initially and on resize
    updateMenuPosition();
    $(window).on('resize', updateMenuPosition);

    function showMenu() {
      $menuItems
        .css('display', 'flex')
        .removeClass('hidden');
      
      // Use a small timeout to ensure the display:flex is applied before adding the class
      setTimeout(function() {
        $menuItems.addClass('menu-visible').removeClass('translate-x-full');
      }, 10);
      
      // Update button to show close state
      $menuIcon.addClass('hidden');
      $closeIcon.removeClass('hidden');
      $menuText.text('Close');
    }

    function hideMenu() {
      $menuItems
        .removeClass('menu-visible')
        .one('transitionend', function(e) {
          if (window.innerWidth < 768) {
            $(this).addClass('hidden').css('display', '');
          }
        });
      
      // Update button to show menu state
      $menuIcon.removeClass('hidden');
      $closeIcon.addClass('hidden');
      $menuText.text('Menu');
    }

    // Event listeners for mobile menu
    $menuButton.on('click', function() {
      if ($menuItems.hasClass('hidden')) {
        showMenu();
      } else {
        hideMenu();
      }
    });
    
    // Functions for collapse/expand functionality
    function collapseMenu() {
      // Only apply on desktop
      if (window.innerWidth >= 768) {
        $header.addClass('collapsed');
        $menuContents.addClass('hidden');
        $collapseButton.addClass('hidden');
        $expandButtonContainer.removeClass('!hidden');
        $mainContent.removeClass('menu-expanded');
        $mainContent.addClass('menu-collapsed');
        localStorage.setItem('menuCollapsed', 'true');
        $collapseButton.attr('aria-expanded', 'false');
        $expandButton.attr('aria-expanded', 'true');
        $expandButtonContainer.removeAttr('style');

      }
    }
    
    function expandMenu() {
      $header.removeClass('collapsed');
      $menuContents.removeClass('hidden');
      $collapseButton.removeClass('hidden');
      $expandButtonContainer.addClass('!hidden');
      $mainContent.removeClass('menu-collapsed');
      $mainContent.addClass('menu-expanded');
      localStorage.setItem('menuCollapsed', 'false');
      $collapseButton.attr('aria-expanded', 'true');
      $expandButton.attr('aria-expanded', 'false');
    }
    
    // Set localStorage default if needed
    if (localStorage.getItem('menuCollapsed') === null) {
      localStorage.setItem('menuCollapsed', 'false');
    }
    
    // Event listeners for collapse/expand
    $collapseButton.on('click', collapseMenu);
    $expandButton.on('click', expandMenu);
    
    // Handle window resize to ensure proper state on breakpoint changes
    $(window).on('resize', function() {
      if (window.innerWidth < 768) {
        // On mobile, always show expanded menu
        $header.removeClass('collapsed');
        $menuContents.removeClass('hidden');
        $mainContent.removeClass('menu-collapsed');
      } else {
        // On desktop, respect the localStorage setting
        const shouldBeCollapsed = localStorage.getItem('menuCollapsed') === 'true';
        if (shouldBeCollapsed) {
          $header.addClass('collapsed');
          $menuContents.addClass('hidden');
          $collapseButton.addClass('hidden');
          $expandButton.removeClass('hidden');
          $mainContent.addClass('menu-collapsed');
        } else {
          $header.removeClass('collapsed');
          $menuContents.removeClass('hidden');
          $collapseButton.removeClass('hidden');
          $expandButton.addClass('hidden');
          $mainContent.removeClass('menu-collapsed');
        }
      }
    });
  });
</script>

<style>
  /* Add this style to your header.html or in your CSS file */
  .nav-dropdown-content {
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.3s ease;
  }
  
  .nav-dropdown-content.expanded {
    max-height: 500px; /* Set this to a value larger than your tallest dropdown */
  }
  
  /* Mobile menu animation styles */
  @media (max-width: 767px) {
    #menu-items {
      transform: translateY(100%);
      transition: transform 0.3s ease;
      right: 0;
      left: 0;
      bottom: 0;
      top: auto;
      height: calc(100vh - var(--header-height, 60px));
      overflow-y: auto;
    }
    
    #menu-items.menu-visible {
      transform: translateY(0);
    }
  }
  
  /* Keep the existing horizontal slide for desktop */
  @media (min-width: 768px) {
    #menu-items {
      transform: none !important;
      top: auto;
      bottom: auto;
      height: auto;
      overflow-y: visible;
    }
  }
</style>





  <div id="main-content" class="flex-1 transition-all duration-300">
    <script>
      // Set initial margin based on localStorage to prevent flash of content
      (function() {
        var mainContent = document.getElementById('main-content');
        var isCollapsed = localStorage.getItem('menuCollapsed') === 'true';
        
        if (isCollapsed) {
          mainContent.classList.add('menu-collapsed');
        } else {
          mainContent.classList.add('menu-expanded');
        }
      })();
    </script>
    <main class="@container p-4 xl:px-6 min-h-[calc(100vh-200px)]">
      <!-- jQuery for convenience -->
<script src="jquery.min.js"></script>

<!-- D3.js -->
<script src="https://d3js.org/d3.v7.min.js"></script>

<!-- svg-pan-zoom for panning/zooming the resulting SVG -->
<script src="svg-pan-zoom.min.js"></script>

<!-- JSZip for reading zipped CSVs -->
<script src="jszip.min.js"></script>

<!-- Papa Parse for CSV parsing -->
<script src="papaparse.min.js"></script>

<script src="murmurHash3.js"></script>

<style>

  .shidden { display: none; }
  .toggle-btn {
    background: none;
    border: none;
    color: #2563EB;
    cursor: pointer;
    padding: 0;
  }
  .loading-spinner {
    vertical-align: middle;
  }
  #graph-container {
    width: 100%;
    height: 70vh;
    position: relative;
    overflow: hidden;
    display: flex;
    justify-content: center;
    align-items: flex-start;
    background: white;
    border: 1px solid #e5e7eb;
    border-radius: 0.375rem;
  }
  #legend {
    display: flex;
    align-items: flex-start;
    flex-wrap: wrap;
    gap: 8px;
    margin-bottom: 0.5rem;
  }
  
  /* D3 Graph Styles */
  .node rect {
    fill: #F3F4F6;
    stroke: #94A3B8;
    stroke-width: 1px;
    filter: drop-shadow(0px 2px 3px rgba(0, 0, 0, 0.1));
  }
  .node.root rect {
    stroke: #2563EB;
    stroke-width: 3px;
    fill: #EFF6FF;
  }
  .node text {
    pointer-events: none;
  }
  .link {
    fill: none;
    stroke-width: 2px;
    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.05));
  }
  .link-label {
    fill: #475569;
    font-size: 12px;
    text-anchor: middle;
    pointer-events: none;
  }
  .legend-item {
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 12px;
    cursor: pointer;
    color: white;
    margin-right: 4px;
    margin-bottom: 4px;
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
    transition: transform 0.2s ease, box-shadow 0.2s ease;
  }
  .legend-item:hover {
    transform: translateY(-1px);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
  }
  .legend-item.disabled {
    opacity: 0.5;
    position: relative;
  }
  .legend-item.disabled::after {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(255, 255, 255, 0.3);
    border-radius: 4px;
  }
  
  /* Hover effects - using !important to override any inline styles */
  .node rect:hover {
    stroke: #2563EB !important;
    stroke-width: 3px !important;
  }
  
  .link:hover {
    stroke: #2563EB !important;
    stroke-width: 4px !important;
  }
  
  /* Arrow styling */
  .arrow-path {
    fill: #94A3B8;
  }
  
  #arrow .arrow-path {
    fill: #94A3B8;
  }
  
  /* Label styling */
  .label-bg:hover {
    fill: #2563EB !important;
  }
  
  /* Make all text in a label group white when the background is hovered */
  .link-label-group:hover .link-label {
    fill: white !important;
  }
  
  /* Custom data attribute selectors for connected elements */
  .link[data-highlighted="true"] {
    stroke: #2563EB !important;
    stroke-width: 4px !important;
  }
  
  .node rect[data-highlighted="true"] {
    stroke: #2563EB !important;
    stroke-width: 3px !important;
  }
  
  .label-bg[data-highlighted="true"] {
    fill: #2563EB !important;
  }
  
  .link-label[data-highlighted="true"] {
    fill: white !important;
  }
  
  /* When hovering a node, highlight connected links */
  .node:hover ~ .links .link {
    stroke: #2563EB !important;
    stroke-width: 4px !important;
  }
  
  /* When hovering a node, highlight connected labels */
  .node:hover ~ .label-group .link-label-group .label-bg {
    fill: #2563EB !important;
  }
  
  .node:hover ~ .label-group .link-label-group .link-label {
    fill: white !important;
  }
</style>

<!-- 
=========================
======== SEARCH UI ======
=========================

This container is displayed in "Search Mode" (no ?subject= in the URL),
letting the user enter a name, see results, and click to load GraphViz mode.
-->

<div id="searchMode" class="mb-4 shidden">
<h1 class="mb-1">People &amp; relationships lookup</h1>
<p class="text-sm mb-3">
  Search for a name or phrase. We'll do an inclusive search (all tokens must appear).
  Each matching subject is displayed along with a quick description. Click on a name to load its relationship graph.
</p>

<div id="searchFormWrapper" class="mb-4">
  <form id="searchForm" class="flex flex-wrap gap-2 items-end">
    <div>
      <label for="searchBox" class="text-sm font-bold mb-1">Name/Keyword(s)</label><br/>
      <input type="text" id="searchBox" class="border border-gray-200 rounded p-2 w-full" placeholder="E.g. 'aaron' or '14th Dalai Lama'"/>
    </div>

    <button type="submit" id="searchButton" class="p-2 border border-gray-200 rounded font-bold text-sm">
      <span class="button-text">Search</span>
      <img src="../assets/images/loading-white.svg" class="loading-spinner" style="display:none;width:16px;height:16px" alt="Loading..."/>
    </button>

    <div class="relative -top-1">
      <input type="checkbox" id="prefixCheck"/>
      <label for="prefixCheck" class="text-sm">Use prefix matching</label>
    </div>

    <span id="statusMessage" class="text-sm"></span>
  </form>
</div>

<div id="resultsContainer" class="flex flex-col gap-2"></div>
<div id="resultsStatus" class="mt-2 text-sm"></div>
</div>

<!-- 
===============================
======== GRAPHVIZ UI =========
===============================

This container is displayed in "GraphViz Mode" (when ?subject= is in the URL, or after user clicks on a result).
It shows the generated graph and a legend, plus a button to go back to the search mode.
-->

<div id="graphMode" class="shidden">
<button id="backToSearch" class="toggle-btn frameless !mb-2">&larr; Return to search</button>

<div id="graphExplanation" class="mb-3">
  <h1 id="graphTitle" class="mb-1">Relationship Graph</h1>
  <p class="text-sm mb-2" id="graphInstructions">
    Below is a visualization of our selected subject's relationships, color-coded by category.  
    <strong>Click any color</strong> in the legend below to toggle that category on/off. The graph will re-render automatically.  
    Click "Download SVG" to get an offline copy of the image.
  </p>
</div>

<!-- Legend for edge categories -->
<div id="legend"></div>

<!-- A spot to show short summary about the root subject from bullets.csv -->
<div id="rootSummary" class="mb-4 p-2 md:px-4 md:pt-3 border rounded text-sm bg-white"></div>

<!-- Where the graph renders -->
<div id="graph-container">
  <div class="absolute bottom-4 right-4 z-10 flex flex-col gap-1">
    <button id="zoomIn" class="p-2 rounded min-w-0 mr-0 bg-black/60 hover:bg-black text-white">
      <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
      </svg>
    </button>
    <button id="zoomOut" class="p-2 rounded min-w-0 mr-0 bg-black/60 hover:bg-black text-white">
      <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4"/>
      </svg>
    </button>
    <button id="zoomFit" class="p-2 rounded min-w-0 mr-0 bg-black/60 hover:bg-black text-white">
      <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 8V4m0 0h4M4 4l5 5m11-5V4m0 0h-4m4 0l-5 5M4 16v4m0 0h4m-4 0l5-5m11 5v-4m0 4h-4m4 0l-5-5"/>
      </svg>
    </button>
  </div>
  <svg id="graph" width="100%" height="100%" preserveAspectRatio="xMidYMid meet">
    <defs>
      <marker id="arrow" viewBox="0 0 10 10" refX="5" refY="5"
        markerWidth="6" markerHeight="6" orient="auto-start-reverse">
        <path d="M 0 0 L 10 5 L 0 10 z" class="arrow-path"></path>
      </marker>
      <!-- Category-specific markers will be added dynamically by D3 -->
    </defs>
    <g id="graph-content"></g>
  </svg>

  <!-- Add loading overlay with the same styling as in expose/index.html -->
  <div id="loading" class="absolute inset-0 flex flex-col items-center justify-start bg-white pt-4 h-full z-30">
    <div class="text-center">
      <svg class="animate-spin h-8 w-8 text-navy mx-auto mb-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
        <path fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4z"></path>
      </svg>
      <div id="loading-text" class="text-lg font-semibold text-navy">Loading data...</div>
      <div id="loading-nodes" class="text-gray-600 max-w-md mx-auto text-center px-4 max-h-[80vh] overflow-y-auto">
        <!-- Node names will be added here -->
      </div>
    </div>
  </div>
  <div id="loading-indicator" class="absolute">
    <img src="../assets/images/loading.svg" class="loading-spinner" style="width:32px;height:32px" alt="Loading...">
  </div>
</div>



<!-- Download button -->
<div class="mt-2 text-right">
  <button id="downloadBtn" class="toggle-btn" style="display: none;">Download SVG</button>
</div>
</div>


<script>
/***************************************
* GLOBALS
***************************************/
let allReverseIndex = new Map();      // token -> array of lineIDs (with ranges)
let allSubjects = [];                 // lines from subjects.csv (index = line-1)
let allBullets = new Map();           // subject -> { bullet_point1, bullet_point2 }
let globalSubjectsMap = new Map();    // subject name -> bullet info
let parsedRelations = [];             // parsed relations data
let parsedIntergraph = [];            // parsed intergraph edges data
let searchInProgress = false;
let searchCanceled = false;
let hasInitialDataLoaded = false;

// For Graph Mode
const NUM_PARTITIONS = 47;           
let categoryColors = {               
  "FAMILY": "#E11D48",
  "WORK": "#2563EB",
  "POLITICAL": "#9333EA",
  "LEGAL": "#DC2626",
  "MEDIA": "#EA580C",
  "EDUCATION": "#4ADE80",
  "HISTORICAL": "#D97706",
  "SOCIAL": "#14B8A6",
  "OTHER": "#6B7280",
  "UNKNOWN": "#6B7280"
};

// D3 Graph variables
let width, height;
let simulation = null;
let zoom = null;
let nodeElements = null;
let linkElements = null;
let labelElements = null;

// We store all graph edges in memory so toggling categories is easy:
let globalNodesMap = new Map();  // subject -> bullet info
let globalAllEdges = new Map();  // key -> edge object
let globalActiveCategories = new Set(); // which categories are currently on display

// Force simulation parameters
const forceParams = {
  linkDistance: 800,     // Reduced from 1200
  charge: -8000,         // Reduced from -10000
  collisionRadius: 400,   // Reduced from 500
  bounds: {
    left: 300,
    right: 300,
    top: 300,
    bottom: 300
  }
};

/***************************************
* ON LOAD
***************************************/
$(document).ready(async function() {
  // Check if we have a ?subject= param
  const urlParams = new URLSearchParams(window.location.search);
  const subj = urlParams.get('subject');

  // Show/hide respective modes
  if (subj) {
    $('#graphMode').removeClass('shidden');
  } else {
    $('#searchMode').removeClass('shidden');
  }

  // Start loading data in background
  await loadInitialData();

  // If we have ?subject=, go straight to GraphViz mode after data loads
  if (subj) {
    try {
      await renderGraphForSubject(subj);
    } catch (error) {
      console.error("Error rendering graph:", error);
      $('#statusMessage').text(`Error: ${error.message}`);
    }
  }

  // Otherwise, remain in search mode, but if the user typed any text in ?search= param, do that:
  const searchParam = urlParams.get('search');
  if (!subj && searchParam) {
    $('#searchBox').val(searchParam);
    $('#searchForm').trigger('submit');
  }
});


/***************************************
* Load initial data: reverse_index, subjects.csv, bullets.csv
***************************************/
async function loadInitialData() {
  if (hasInitialDataLoaded) return;
  $('#statusMessage').text('Loading data...');

  try {
    // Show spinner
    $('#searchButton .button-text').hide();
    $('#searchButton .loading-spinner').show();
    $('#searchButton').prop('disabled', true);

    // 1) Load reverse_index.txt
    await loadReverseIndex("reverse_index.txt");

    // 2) Load subjects.csv (from subjects.csv.zip)
    await loadSubjectsCSV("subjects.csv.zip", "subjects.csv");

    // 3) Load bullets.csv (from bullets.csv.zip)
    await loadBulletsCSV("bullets.csv.zip", "bullets.csv");

    hasInitialDataLoaded = true;
    $('#statusMessage').empty();
  } catch (err) {
    console.error(err);
    $('#statusMessage').text("Error: " + err);
  } finally {
    // Hide spinner
    $('#searchButton .loading-spinner').hide();
    $('#searchButton .button-text').show();
    $('#searchButton').prop('disabled', false);
  }
}

async function loadReverseIndex(txtUrl) {
  // If it's zipped, do fetch -> JSZip -> read string. 
  // For demo, assume it's just "reverse_index.txt".
  const resp = await fetch(txtUrl);
  if (!resp.ok) throw new Error(`Could not fetch ${txtUrl}`);
  const text = await resp.text();

  // parse lines like "aaron:75-110,6194,8048,13186,20098,34603"
  const lines = text.split(/\r?\n/);
  for (let line of lines) {
    line = line.trim();
    if (!line) continue;
    const parts = line.split(':');
    if (parts.length !== 2) continue;
    const token = parts[0];
    const ranges = parts[1].split(',');

    let lineIDs = [];
    for (let r of ranges) {
      if (r.includes('-')) {
        const [start, end] = r.split('-').map(x=>parseInt(x,10));
        for (let i=start; i<=end; i++) {
          lineIDs.push(i);
        }
      } else {
        let val = parseInt(r, 10);
        if (!isNaN(val)) {
          lineIDs.push(val);
        }
      }
    }
    if (!allReverseIndex.has(token)) {
      allReverseIndex.set(token, []);
    }
    allReverseIndex.get(token).push(...lineIDs);
  }
}

async function loadSubjectsCSV(zipUrl, csvFile) {
  const resp = await fetch(zipUrl);
  if (!resp.ok) throw new Error('Could not fetch ' + zipUrl);
  const buffer = await resp.arrayBuffer();

  const z = await JSZip.loadAsync(buffer);
  if (!z.file(csvFile)) throw new Error(`Missing file ${csvFile} in zip.`);

  const csvData = await z.file(csvFile).async('string');
  const parsed = Papa.parse(csvData, {
    header: true,
    skipEmptyLines: true
  });
  allSubjects = parsed.data; 
}

async function loadBulletsCSV(zipUrl, csvFile) {
  const resp = await fetch(zipUrl);
  if (!resp.ok) throw new Error('Could not fetch ' + zipUrl);
  const buffer = await resp.arrayBuffer();

  const z = await JSZip.loadAsync(buffer);
  if (!z.file(csvFile)) throw new Error(`Missing file ${csvFile} in zip.`);

  const csvData = await z.file(csvFile).async('string');
  const parsed = Papa.parse(csvData, {
    header: true,
    skipEmptyLines: true
  });

  for (let row of parsed.data) {
    const s = row['subject']?.trim() ?? '';
    if (!s) continue;
    const bulletInfo = {
      bullet_point1: row['bullet_point1'] || '',
      bullet_point2: row['bullet_point2'] || ''
    };
    allBullets.set(s, bulletInfo);
    globalSubjectsMap.set(s, bulletInfo);
  }
}

// Function to load relations data for a specific subject
async function loadRelationsData(subjectName) {
  try {
    // figure out which partition
    const partitionIdx = partitionIndex(subjectName);
    let pStr = partitionIdx.toString().padStart(2,'0');
    const relationsZip = `relations_${pStr}.zip`;
    
    console.log(`Loading relations data for ${subjectName} from ${relationsZip}`);
    
    const resp = await fetch(relationsZip);
    if (!resp.ok) {
      throw new Error(`Unable to fetch ${relationsZip}: ${resp.status} ${resp.statusText}`);
    }
    
    const buffer = await resp.arrayBuffer();
    const z = await JSZip.loadAsync(buffer);
    
    // Check if files exist in the zip
    if (!z.file('relations.csv')) {
      throw new Error(`Missing relations.csv in ${relationsZip}`);
    }
    
    // Parse relations.csv
    const relationsCsv = await z.file('relations.csv').async('string');
    parsedRelations = Papa.parse(relationsCsv, { 
      header: true, 
      skipEmptyLines: true 
    }).data;
    
    console.log(`Loaded ${parsedRelations.length} relations`);
    
    // Optionally load intergraph_edges.csv if it exists
    if (z.file('intergraph_edges.csv')) {
      const interCsv = await z.file('intergraph_edges.csv').async('string');
      parsedIntergraph = Papa.parse(interCsv, { 
        header: true, 
        skipEmptyLines: true 
      }).data;
      console.log(`Loaded ${parsedIntergraph.length} intergraph edges`);
    } else {
      console.log('No intergraph_edges.csv found in zip');
      parsedIntergraph = [];
    }
    
    return true;
  } catch (error) {
    console.error("Error loading relations data:", error);
    $('#statusMessage').text(`Error loading relations: ${error.message}`);
    throw error;
  }
}

// Helper function to determine which partition a subject belongs to
function partitionIndex(subject) {
  // Use murmur hash to determine partition
  const hash = murmurHash3.x86.hash32(subject);
  return Math.abs(hash) % NUM_PARTITIONS;
}


/***************************************
* SEARCH FORM
***************************************/
$('#searchForm').on('submit', async function(e) {
  e.preventDefault();
  if (searchInProgress) {
    // If in progress, let user cancel
    searchCanceled = true;
    return;
  }
  searchCanceled = false;
  searchInProgress = true;

  // clear old results
  $('#resultsContainer').empty();
  $('#resultsStatus').empty();

  // show spinner
  $('#searchButton .button-text').text("Stop");
  $('#searchBox').prop('disabled', true);

  try {
    await doSearch();
  } catch (err) {
    console.error(err);
    $('#resultsContainer').html(`<div class="p-2 text-center text-sm text-red-500">Error: ${err}</div>`);
  }

  // restore
  searchInProgress = false;
  $('#searchButton .button-text').text("Search");
  $('#searchBox').prop('disabled', false);
});


async function doSearch() {
  const rawInput = $('#searchBox').val().toLowerCase().trim();
  if (!rawInput) {
    $('#resultsContainer').html('<div class="p-2 text-center text-sm">No input provided.</div>');
    return;
  }

  // update URL param ?search= 
  const newUrl = new URL(window.location);
  newUrl.searchParams.delete('subject');
  newUrl.searchParams.set('search', rawInput);
  window.history.pushState({}, '', newUrl);

  // tokenize
  let tokens = tokenizeInput(rawInput);

  // intersect sets
  let finalLineSet = null;
  for (let t of tokens) {
    if (searchCanceled) break;

    let linesForT = new Set();
    // exact matches
    if (allReverseIndex.has(t)) {
      for (let ln of allReverseIndex.get(t)) {
        linesForT.add(ln);
      }
    }
    // prefix if box is checked
    if ($('#prefixCheck').is(':checked') && t.length >= 4) {
      // find anything that starts with t
      for (let [kw, lines] of allReverseIndex.entries()) {
        if (kw.startsWith(t) && kw !== t) {
          for (let ln of lines) {
            linesForT.add(ln);
          }
        }
      }
    }

    // intersect
    if (finalLineSet === null) {
      finalLineSet = linesForT;
    } else {
      let tmp = new Set();
      for (let x of finalLineSet) {
        if (linesForT.has(x)) tmp.add(x);
      }
      finalLineSet = tmp;
    }
    if (!finalLineSet.size) break;
  }

  if (!finalLineSet || !finalLineSet.size) {
    $('#resultsContainer').html('<div class="p-2 text-center text-sm">No matches found.</div>');
    return;
  }

  let sortedLines = Array.from(finalLineSet).sort((a,b)=>a-b);
  let limit = 100;
  let displayed = 0;

  for (let ln of sortedLines) {
    if (searchCanceled) break;
    if (displayed >= limit) break;

    let idx = ln - 1;
    if (idx >= 0 && idx < allSubjects.length) {
      let row = allSubjects[idx];
      let subject = row['subject'] || '';
      let desc = row['bullet_point1'] || '';
      $('#resultsContainer').append(renderSearchResult(subject, desc));
      displayed++;
    }
  }

  if (displayed > 0) {
    let extra = searchCanceled ? ' (stopped)' : (displayed === limit ? ' (limit)' : '');
    $('#resultsStatus').text(`Showing ${displayed}${extra} results`);
  } else {
    $('#resultsContainer').html('<div class="p-2 text-center text-sm">No results found.</div>');
  }
}

function tokenizeInput(txt) {
  // remove non-alphanumeric except for ' and "
  txt = txt.replace(/[^\w\s"']+/g, ' ');
  return txt.split(/\s+/).filter(Boolean);
}

function renderSearchResult(subject, desc) {
  const safeSubject = escapeHtml(subject);
  const safeDesc = escapeHtml(desc);

  let $div = $(`
    <div class="group border border-gray-200 hover:border-gray-400 bg-white rounded p-2 md:px-4 leading-tight">
      <strong class="text-navy group-hover:text-blue text-sm">${safeSubject}</strong><br/>
      <span class="text-[13px]">${safeDesc}</span>
    </div>
  `);

  $div.css('cursor','pointer').on('click', function() {
    // Get current search value
    const searchValue = $('#searchBox').val().trim();
    let url = '?subject=' + encodeURIComponent(subject);
    if (searchValue) {
      url += '&search=' + encodeURIComponent(searchValue);
    }
    window.location.href = url;
  });

  return $div;
}


/***************************************
* BACK TO SEARCH
***************************************/
$('#backToSearch').on('click', function() {
  const urlParams = new URLSearchParams(window.location.search);
  const searchValue = urlParams.get('search');
  
  const newUrl = new URL(window.location);
  newUrl.searchParams.delete('subject');
  
  if (searchValue) {
    newUrl.searchParams.set('search', searchValue);
  }
  
  window.history.pushState({}, '', newUrl);
  window.location.reload();
});


/***************************************
* GRAPH MODE
***************************************/
async function renderGraphForSubject(subjectName) {
  try {
    // Show loading indicator
    $('#loading-indicator').show();
    $('#graphInstructions').hide();
    
    // Clear any previous error messages
    $('#graph-container').removeClass('error');
    
    // Get the subject data
    const subject = globalSubjectsMap.get(subjectName);
    if (!subject) {
      throw new Error(`Subject "${subjectName}" not found`);
    }
    
    // Populate the root summary div with bullet points
    const rootSummaryHtml = [];
    if (subject.bullet_point1) {
      rootSummaryHtml.push(`<p class="mb-1">${escapeHtml(subject.bullet_point1)}</p>`);
    }
    if (subject.bullet_point2) {
      rootSummaryHtml.push(`<p>${escapeHtml(subject.bullet_point2)}</p>`);
    }
    // If no bullet points, add a default message
    if (rootSummaryHtml.length === 0) {
      rootSummaryHtml.push(`<p class="text-gray-500 italic">No detailed information available for ${escapeHtml(subjectName)}.</p>`);
    }
    // Add a title for the summary
    $('#rootSummary').html(`
      <h3 class="font-bold mt-0 mb-2 text-navy">${escapeHtml(subjectName)}</h3>
      ${rootSummaryHtml.join('')}
    `);
    
    // Load relations data for this subject
    await loadRelationsData(subjectName);
    
    // Reset global variables
    globalNodesMap = new Map();
    globalAllEdges = new Map();
    
    // Create nodes and edges for the graph
    const nodes = [];
    const edges = [];
    const edgesSet = new Set();
    
    // Add the root subject node
    const rootNode = {
      id: subjectName,
      bulletInfo: subject
    };
    nodes.push(rootNode);

    // 1) Forward edges
    for (let row of parsedRelations) {
      let s = row.subject?.trim() || "";
      let o = row.object?.trim() || "";
      if (s !== subjectName) continue;
      if (!o) continue;
      
      // Skip self-loops
      if (s === o) continue;
      
      // Check if we should skip symmetrical duplicates
      if (parseInt(row.is_symmetrical,10)===1) {
        let hasMirror = parsedRelations.some(rel => {
          return (rel.subject?.trim() === o && rel.object?.trim() === s);
        });
        if (hasMirror && s > o) continue;
      }

      addNodeIfNeeded(globalNodesMap, o);
      let c = row.category?.trim() || "UNKNOWN";
      let color = categoryColors[c] || categoryColors["UNKNOWN"];
      addEdge(edgesSet, globalAllEdges, s, o, (row.label||""), c, color);
    }

    // 2) Reverse edges
    for (let revRow of parsedRelations) {
      let s = revRow.subject?.trim() || "";
      let o = revRow.object?.trim() || "";
      if (o !== subjectName) continue;
      if (!s) continue;

      // Skip self-loops
      if (s === o) continue;
      
      // Check if we should skip symmetrical duplicates
      if (parseInt(revRow.is_symmetrical,10)===1) {
        let hasMirror = parsedRelations.some(rel => {
          return (rel.subject?.trim() === subjectName && rel.object?.trim() === s);
        });
        if (hasMirror) continue;
      }
      addNodeIfNeeded(globalNodesMap, s);
      let c = revRow.category?.trim() || "UNKNOWN";
      let color = categoryColors[c] || categoryColors["UNKNOWN"];
      addEdge(edgesSet, globalAllEdges, s, subjectName, (revRow.label||""), c, color);
    }

    // 3) Intergraph edges
    const potentialEdges = [];
    for (let iRow of parsedIntergraph) {
      let rp = iRow.root_person?.trim() || "";
      if (rp !== subjectName) continue;

      let s = iRow.subject?.trim() || "";
      let o = iRow.object?.trim() || "";
      if (!s || !o) continue;

      if (globalNodesMap.has(s) && globalNodesMap.has(o)) {
        potentialEdges.push({
          from: s,
          to: o,
          label: iRow.label || "",
          symmetrical: parseInt(iRow.is_symmetrical,10)===1,
          category: iRow.category?.trim() || "UNKNOWN"
        });
      }
    }
    // Filter symmetrical duplicates
    let finalInterEdges = [];
    for (let pe of potentialEdges) {
      let swapped = potentialEdges.find(e => {
        return (e.from === pe.to && e.to === pe.from && e.symmetrical === true && pe.symmetrical === true);
      });
      if (swapped && pe.from > pe.to) {
        // skip
        continue;
      }
      finalInterEdges.push(pe);
    }
    
    // Add intergraph edges
    for (let ie of finalInterEdges) {
      let c = ie.category;
      let color = categoryColors[c] || categoryColors["UNKNOWN"];
      addEdge(edgesSet, globalAllEdges, ie.from, ie.to, ie.label, c, color);
    }
    
    // Convert nodes map to array
    for (let [id, bulletInfo] of globalNodesMap) {
      if (id === subjectName) continue; // Skip root node, already added
      nodes.push({
        id: id,
        bulletInfo: bulletInfo
      });
    }
    
    // Convert edges set to array
    for (let edgeKey of edgesSet) {
      const edge = globalAllEdges.get(edgeKey);
      if (edge) {
        edges.push(edge);
      }
    }
    
    // Collect unique categories for the legend
    const uniqueCategories = new Set();
    for (const edge of edges) {
      if (edge.category) {
        uniqueCategories.add(edge.category);
      }
    }
    
    // Initialize active categories with all categories
    globalActiveCategories = new Set(uniqueCategories);

    // Render the legend
    renderLegend(Array.from(uniqueCategories));
    
    // Render the graph
    renderD3Graph(subjectName, nodes, edges);
    
    // Update URL with subject
    const url = new URL(window.location);
    url.searchParams.set('subject', subjectName);
    window.history.pushState({}, '', url);
    
    // Update page title
    document.title = `${subjectName} - People Relations`;
    
    // Show instructions
    $('#graphInstructions').show();
  } catch (error) {
    console.error("Error loading relationships:", error);
    
    // Hide loading indicator
    $('#loading-indicator').hide();
    
    // Display error message to user
    $('#graph-container').html(`
      <div class="p-4 bg-red-50 border border-red-200 rounded-md text-red-800">
        <h3 class="font-bold mb-2">Error loading relationships:</h3>
        <p>${error.message || error}</p>
        <p class="mt-2">Please try refreshing the page or selecting a different subject.</p>
      </div>
    `);
    
    // Update instructions
    $('#graphInstructions').html(`
      <p class="text-red-600">An error occurred while loading the graph. Please try again.</p>
    `).show();
  }
}

// Build & render the DOT from globalNodesMap + filtered edges

// A function to ensure node exists
function addNodeIfNeeded(map, subject) {
  if (!map.has(subject)) {
    let bullet = allBullets.get(subject) || { bullet_point1:'', bullet_point2:'' };
    map.set(subject, bullet);
  }
}

// Deduplicate edges
function addEdge(edgesSet, edgesMap, from, to, label, category, color) {
  let key = `${from}||${to}||${category}||${label}`;
  if (edgesSet.has(key)) {
    return; // skip duplicates
  }
  edgesSet.add(key);
  
  // Store in the map with the key
  if (!(edgesMap instanceof Map)) {
    console.error("edgesMap is not a Map:", edgesMap);
    // Initialize as a Map if it's not already
    edgesMap = new Map();
  }
  
  edgesMap.set(key, { from, to, label, category, color });
}

// Partition
function partitionIndex(subj) {
  const h = murmurHash3.x86.hash32(subj);
  return h % NUM_PARTITIONS;
}

async function getZipText(zipObj, filename) {
  if (!zipObj.file(filename)) throw new Error(`Missing ${filename} in zip.`);
  return await zipObj.file(filename).async('string');
}


/***************************************

function buildDotSource(rootSubject, nodesMap, edges) {
  let dot = `digraph G {
rankdir="TB";
node [ shape=box, style="filled", fillcolor="#F3F4F6", color="#94A3B8", fontname="Arial", fontsize=13 ];
edge [ fontname="Arial", color="#DADBE7", penwidth=2, fontsize=11 ];
`;

  for (let [subj, bulletData] of nodesMap.entries()) {
    let p1Wrapped = insertLineBreaks(bulletData.bullet_point1 || "");
    let p2Wrapped = insertLineBreaks(bulletData.bullet_point2 || "");
    let subjWrapped = insertLineBreaks(subj);

    // HTML-like label
    let label = `<<table border="0" cellborder="0" cellpadding="2" cellspacing="0">
      <tr><td align="left"><b>${subjWrapped}</b></td></tr>
      ${ p1Wrapped ? `<tr><td align="left"><font point-size="10">${p1Wrapped}</font></td></tr>` : '' }
      ${ p2Wrapped ? `<tr><td align="left"><font point-size="10">${p2Wrapped}</font></td></tr>` : '' }
    </table>>`;

    if (subj === rootSubject) {
      dot += `"${subj}" [ color="#2563EB", penwidth=3, label=${label} ];\n`;
    } else {
      dot += `"${subj}" [ label=${label} ];\n`;
    }
  }

  for (let e of edges) {
    dot += `"${e.from}" -> "${e.to}" [ label="${escapeHtml(e.label)}", color="${e.color}" ];\n`;
  }

  dot += `}\n`;
  return dot;
}

function renderDot(dotSrc) {
  $('#graph-container').empty();
  let viz = new Viz();

  viz.renderSVGElement(dotSrc)
    .then(svgEl => {
      // let it fill the container
      svgEl.setAttribute('width', '100%');
      svgEl.setAttribute('height', '100%');
      svgEl.setAttribute('preserveAspectRatio', 'xMidYMid meet');

      $('#graph-container').append(svgEl);

      // enable pan/zoom
      if (panZoomInstance) {
        panZoomInstance.destroy();
      }
      panZoomInstance = svgPanZoom(svgEl, {
        zoomEnabled: true,
        controlIconsEnabled: true,
        fit: true,
        center: true
      });
      // Force another fit + center so it uses max space
      panZoomInstance.resize();
      panZoomInstance.fit();
      panZoomInstance.center();

      // show download button
      $('#downloadBtn').show();
    })
    .catch(err => {
      console.error(err);
      $('#graph-container').html(`<div class="p-2 text-center text-sm text-red-500">Error generating graph: ${err}</div>`);
    });
}


/***************************************
* LEGEND & CATEGORY TOGGLING
***************************************/
function renderLegend(categories) {
  let html = '';
  categories.sort(); // optional: sort them alphabetically
  for (let c of categories) {
    let color = categoryColors[c] || categoryColors["UNKNOWN"];
    html += `<div class="legend-item" data-cat="${c}" style="background-color: ${color};">${c}</div>`;
  }
  $('#legend').html(html);

  // Attach click handler
  $('#legend .legend-item').on('click', function() {
    let cat = $(this).data('cat');
    toggleCategory(cat);
    $(this).toggleClass('disabled', !globalActiveCategories.has(cat));
  });
}

// Toggle a category in/out of the active set
function toggleCategory(cat) {
  if (globalActiveCategories.has(cat)) {
    globalActiveCategories.delete(cat);
  } else {
    globalActiveCategories.add(cat);
  }
  
  // Update edge visibility
  linkElements.attr('visibility', d => 
    globalActiveCategories.has(d.category) ? 'visible' : 'hidden'
  );
  
  // Update label visibility
  labelElements.attr('visibility', d => 
    globalActiveCategories.has(d.category) ? 'visible' : 'hidden'
  );
  
  // Update edge marker visibility (arrows)
  linkElements.attr('marker-end', d => 
    globalActiveCategories.has(d.category) 
      ? `url(#arrow-${d.category || 'UNKNOWN'})` 
      : 'none'
  );
  
  // Update legend items visual state
  $('.legend-item').each(function() {
    const category = $(this).data('cat');
    $(this).toggleClass('disabled', !globalActiveCategories.has(category));
  });
}


/***************************************
* DOWNLOAD SVG
***************************************/
$('#downloadBtn').on('click', function() {
  const svgEl = document.querySelector('#graph');
  if (!svgEl) {
    alert('No SVG to download');
    return;
  }
  
  // Create a clone of the SVG to modify for download
  const clonedSvg = svgEl.cloneNode(true);
  
  // Set explicit width and height
  clonedSvg.setAttribute('width', width);
  clonedSvg.setAttribute('height', height);
  
  // Reset the transform to ensure the graph is centered
  const content = clonedSvg.querySelector('#graph-content');
  if (content) {
    content.setAttribute('transform', `translate(${width/2}, ${height/2})`);
  }
  
  // Convert to string
  const svgData = new XMLSerializer().serializeToString(clonedSvg);
  const blob = new Blob([svgData], { type: 'image/svg+xml;charset=utf-8' });
  const url = URL.createObjectURL(blob);

  let link = document.createElement('a');
  link.href = url;
  link.download = 'relation_graph.svg';
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
});


/***************************************
* HELPER
***************************************/
function escapeHtml(str) {
  if (!str) return '';
  return str
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;');
}

/***************************************
* D3 GRAPH RENDERING
***************************************/
function initializeD3Graph() {
  // Get container dimensions
  const container = document.getElementById('graph-container');
  width = container.clientWidth;
  height = container.clientHeight;
  
  // Set the SVG viewBox to cover the entire container
  d3.select('#graph')
    .attr('viewBox', `${-width/1.5} ${-height/1.5} ${width*1.5} ${height*1.5}`)
    .attr('preserveAspectRatio', 'xMidYMid meet');
  
  // Initialize zoom behavior
  zoom = d3.zoom()
    .scaleExtent([0.1, 2])
    .on('zoom', (event) => {
      d3.select('#graph-content').attr('transform', event.transform);
    });
  
  // Apply zoom behavior to SVG
  d3.select('#graph')
    .call(zoom)
    .on('dblclick.zoom', null); // Disable double-click zoom
    
  // Center the graph with a moderate scale factor
  resetZoom();
  
  // Show loading indicator
  $('#loading-indicator').show();
}

function resetZoom() {
  // Center the graph with an appropriate scale for hierarchical layout
  // In hierarchical layout, we want to center more towards the top where the root node is
  d3.select('#graph').call(
    zoom.transform,
    d3.zoomIdentity.translate(0, height * -0.1).scale(0.5) // Move even higher by using negative value
  );
}

function renderD3Graph(rootSubject, nodes, edges) {
  // Clear previous graph
  d3.select('#graph-content').selectAll('*').remove();
  
  // Hide loading indicator when rendering starts
  $('#loading-indicator').hide();
  // Note: We keep the main 'loading' overlay visible until the graph is fully centered
  // That will be hidden in the centerGraph function when "Graph centered based on actual bounds" is logged
  
  // Update loading text to show that the graph is being processed
  $('#loading-text').text('Analyzing connections...');
  
  // Remove the premature timeout - we'll let the centerGraph function handle hiding the overlay
  // instead of this fixed 10-second timer
  
  // Initialize container dimensions
  const container = document.getElementById('graph-container');
  width = container.clientWidth;
  height = container.clientHeight;
  
  // Make edges available globally to prevent "edges is not defined" errors
  window.edges = edges;
  
  // Initialize zoom behavior if not already done
  if (!zoom) {
    zoom = d3.zoom()
      .scaleExtent([0.1, 2])
      .on('zoom', (event) => {
        d3.select('#graph-content').attr('transform', event.transform);
      });
    
    // Apply zoom behavior to SVG
    d3.select('#graph')
      .call(zoom)
      .on('dblclick.zoom', null); // Disable double-click zoom
  }
  
  // Reset zoom and pan with centered graph
  d3.select('#graph').call(
    zoom.transform,
    d3.zoomIdentity.translate(0, -height * 0.25).scale(0.5) // Increase negative offset to move higher
  );
  
  // Create the graph content group with initial transform
  const g = d3.select('#graph-content');
  
  // Explicitly set an initial transform on the graph content to center it
  g.attr('transform', `translate(${width/2}, ${height/4})`); // Position at 1/4 height instead of 1/3
  
  // Store the root subject for reference in other functions
  window.rootSubject = rootSubject;
  
  // Separate root node from other nodes
  const rootNode = nodes.find(n => n.id === rootSubject);
  const nonRootNodes = nodes.filter(n => n.id !== rootSubject);
  
  // Create a map of node IDs for quick lookup - make it global for other functions to use
  window.nodeMap = new Map();
  nodes.forEach(node => {
    nodeMap.set(node.id, node);
  });
  
  // Position root node at the top center
  if (rootNode) {
    rootNode.x = 0; // Center horizontally
    rootNode.y = -height * 0.9; // Position much higher (was 0.7)
    rootNode.fx = 0; // Fix position horizontally
    rootNode.fy = -height * 0.9; // Fix position vertically (was 0.7)
  }
  
  // Arrange non-root nodes in a tiered layout instead of a semi-circle
  // First identify first-level nodes (directly connected to root)
  const firstLevelIds = new Set();
  edges.forEach(edge => {
    if (edge.from === rootSubject) {
      firstLevelIds.add(edge.to);
    } else if (edge.to === rootSubject) {
      firstLevelIds.add(edge.from);
    }
  });
  
  // Now position nodes in tiers
  nonRootNodes.forEach(node => {
    // Randomize x position slightly for each node
    const xOffset = (Math.random() - 0.5) * width * 0.6;
    
    if (firstLevelIds.has(node.id)) {
      // First tier - below root but in a more spread out arrangement
      node.x = xOffset;
      node.y = -height * 0.5; // First tier below root
    } else {
      // Second+ tier - further below
      node.x = xOffset * 1.2; // Wider spread for lower tiers
      node.y = -height * 0.1 + (Math.random() * height * 0.3); // Variable positions lower down
    }
  });
  
  // Preprocess edges to ensure all source and target nodes exist
  console.log(`Processing ${edges.length} edges...`);
  
  // Create validEdges variable that references the edges array
  // This ensures validEdges is defined for any code that references it
  const validEdges = edges.filter(edge => {
    const sourceId = edge.from;
    const targetId = edge.to;
    
    // Check if source and target nodes exist
    const sourceExists = nodeMap.has(sourceId);
    const targetExists = nodeMap.has(targetId);
    
    if (!sourceExists) {
      console.warn(`Edge source node not found: ${sourceId}`);
    }
    if (!targetExists) {
      console.warn(`Edge target node not found: ${targetId}`);
    }
    
    // Only keep edges where both nodes exist
    if (sourceExists && targetExists) {
      // Set source and target properties for D3
      edge.source = sourceId;
      edge.target = targetId;
      return true;
    }
    return false;
  });
  
  console.log(`Filtered to ${validEdges.length} valid edges`);
  
  // Identify first-level nodes (directly connected to root)
  window.firstLevelNodeIds = new Set();
  validEdges.forEach(edge => {
    if (edge.from === rootSubject) {
      firstLevelNodeIds.add(edge.to);
      console.log(`Added first-level node from root: ${edge.to} via relation: ${edge.label || "unlabeled"}`);
    } else if (edge.to === rootSubject) {
      firstLevelNodeIds.add(edge.from);
      console.log(`Added first-level node to root: ${edge.from} via relation: ${edge.label || "unlabeled"}`);
    }
  });
  
  console.log(`Identified ${firstLevelNodeIds.size} first-level nodes`);
  console.log('First-level nodes:', Array.from(firstLevelNodeIds));
  
  // We'll call displayNodesProgressively() after nodeElements is defined
  
  // Add arrow markers for links
  const defs = g.append('defs');
  
  // Create marker definitions for each category
  Object.entries(categoryColors).forEach(([category, color]) => {
    defs.append('marker')
      .attr('id', `arrow-${category}`)
      .attr('viewBox', '0 -5 10 10')
      .attr('refX', 20)
      .attr('refY', 0)
      .attr('markerWidth', 8)
      .attr('markerHeight', 8)
      .attr('orient', 'auto')
      .append('path')
      .attr('fill', color)
      .attr('d', 'M0,-5L10,0L0,5');
  });
  
  // Regular arrow marker (fallback)
  defs.append('marker')
    .attr('id', 'arrow')
    .attr('viewBox', '0 -5 10 10')
    .attr('refX', 20)
    .attr('refY', 0)
    .attr('markerWidth', 8)
    .attr('markerHeight', 8)
    .attr('orient', 'auto')
    .append('path')
    .attr('fill', '#94A3B8')  // Default gray color
    .attr('d', 'M0,-5L10,0L0,5');
  
  // Create links
  linkElements = g.append('g')
    .attr('class', 'links')
    .selectAll('path')
    .data(validEdges)
    .join('path')
    .attr('class', 'link')
    .attr('stroke', d => {
      // Get the color from the category using the global categoryColors
      return categoryColors[d.category] || categoryColors["UNKNOWN"];
    })
    .attr('stroke-width', 2)
    .attr('marker-end', d => `url(#arrow-${d.category || 'UNKNOWN'})`)
    .attr('data-source', d => d.from)
    .attr('data-target', d => d.to)
    .attr('data-category', d => d.category)
    .style('cursor', 'pointer')
    .on('mouseover', function(event, d) {
      console.log('Link path hover:', d);
      
      // Get source and target IDs
      const sourceId = d.from;
      const targetId = d.to;
      
      // Highlight this connection
      highlightConnection(sourceId, targetId);
    })
    .on('mouseout', function() {
      console.log('Link path mouseout');
      resetHighlights();
    });
  
  // Create nodes
  nodeElements = g.append('g')
    .attr('class', 'nodes')
    .selectAll('g')
    .data(nodes)
    .join('g')
    .attr('class', d => d.id === rootSubject ? 'node root' : 'node')
    .attr('data-id', d => d.id);
   
  // Start displaying first-level nodes progressively now that nodeElements is defined
  displayNodesProgressively();
    
  // Add rectangles to nodes
  nodeElements.append('rect')
    .attr('rx', 4)
    .attr('ry', 4)
    .attr('width', d => getNodeWidth(d))
    .attr('height', d => getNodeHeight(d))
    .attr('fill', 'white')
    .attr('stroke', d => d.id === rootSubject ? '#2563EB' : '#94A3B8')
    .attr('stroke-width', d => d.id === rootSubject ? 3 : 1)
    .style('cursor', 'default') // Changed from 'grab' to 'default'
    .on('mouseover', function(event, d) {
      console.log('Node rect hover:', d);
      
      // Highlight all connections to/from this node
      highlightNodeConnections(d.id);
    })
    .on('mouseout', function() {
      console.log('Node rect mouseout');
      resetHighlights();
    });
    
  // Add text to nodes
  nodeElements.each(function(d) {
    const node = d3.select(this);
    const bulletInfo = d.bulletInfo || {};
    const padding = 12;
    let y = padding;
    
    // Calculate node width for text wrapping
    const nodeWidth = getNodeWidth(d);
    const maxCharsPerLine = Math.floor((nodeWidth - padding * 2) / 6.5); // Adjusted chars per line
    
    // Add subject name
    node.append('text')
      .attr('x', padding)
      .attr('y', y + 15)
      .attr('font-weight', 'bold')
      .attr('font-size', '14px')
      .text(d.id);
    y += 25;
    
    // Add bullet point 1 if available
    if (bulletInfo && bulletInfo.bullet_point1) {
      const wrappedText = wrapText(bulletInfo.bullet_point1, maxCharsPerLine);
      wrappedText.forEach(line => {
        node.append('text')
          .attr('x', padding)
          .attr('y', y + 12)
          .attr('font-size', '12px')
          .text(line);
        y += 18;
      });
    }
    
    // Add bullet point 2 if available
    if (bulletInfo && bulletInfo.bullet_point2) {
      y += 5; // Add a little extra space
      const wrappedText = wrapText(bulletInfo.bullet_point2, maxCharsPerLine);
      wrappedText.forEach(line => {
        node.append('text')
          .attr('x', padding)
          .attr('y', y + 12)
          .attr('font-size', '12px')
          .text(line);
        y += 18;
      });
    }
  });
    
  // Create edge labels
  const labelGroup = g.append('g').attr('class', 'label-group');
  labelElements = labelGroup.selectAll('g')
    .data(validEdges)
    .join('g')
    .attr('class', 'link-label-group')
    .attr('data-source', d => d.from)
    .attr('data-target', d => d.to);
  
  // Add background pill for labels
  labelElements.append('rect')
    .attr('rx', 12)
    .attr('ry', 12)
    .attr('class', 'label-bg')
    .attr('fill', '#F3F4F6')
    .attr('stroke', '#94A3B8')
    .attr('width', 10) // Initial size, will be updated in ticked
    .attr('height', 10)
    .attr('x', -5)
    .attr('y', -5)
    .style('cursor', 'pointer')
    .on('mouseover', function(event, d) {
      console.log('Label bg hover:', d);
      
      // Highlight this connection
      highlightConnection(d.from, d.to);
      
      // Highlight the specific path
      linkElements.filter(l => l.from === d.from && l.to === d.to)
        .attr('stroke-width', 4)
        .attr('stroke-opacity', 1);
    })
    .on('mouseout', function(event, d) {
      console.log('Label bg mouseout');
      resetHighlights();
      
      // Restore original path styling
      linkElements.filter(l => l.from === d.from && l.to === d.to)
        .attr('stroke-width', 2)
        .attr('stroke-opacity', 0.8);
    });
    
  // Add text labels with wrapping
  labelElements.each(function(d) {
    try {
    const labelGroup = d3.select(this);
    const label = d.label || "";
    
    // Skip empty labels
    if (!label.trim()) {
      labelGroup.append('text')
        .attr('class', 'link-label')
        .attr('fill', '#475569')
        .text("");
      return;
    }
    
      // For "Son of" relationship, use special styling and don't wrap
      const isSonOfRelation = label.includes("Son of") || label.includes("Child of") || 
                             label.includes("Parent of") || label.includes("Father of") || 
                             label.includes("Mother of");
      
      if (isSonOfRelation) {
        // Use a single text element with special styling for these important relationships
        labelGroup.append('text')
          .attr('class', 'link-label relationship-label')
          .attr('fill', '#3B82F6') // Blue color for relationship labels
          .attr('text-anchor', 'middle')
          .attr('font-weight', 'bold')
          .attr('dy', '0.3em')
          .text(label);
      } else {
        // Wrap text to max 20 characters per line for other relationships
    const wrappedText = wrapText(label, 20);
    
    // Add each line of text
    wrappedText.forEach((line, i) => {
      labelGroup.append('text')
        .attr('class', 'link-label')
        .attr('fill', '#475569')
        .attr('text-anchor', 'middle') // Center text
        .attr('dy', (i - (wrappedText.length - 1) / 2) * 16)
        .text(line);
    });
      }
      
      if (!d.pathPoints) {
        return;
      }
      
      const { source, target } = d.pathPoints;
      const labelEl = d3.select(this);
      
      // Calculate basic position for labels
      let labelX, labelY;
      
      // Create a unique identifier for this edge to ensure consistent offsets
      const edgeId = `${d.from}-${d.to}`;
      // Create a hash from the edge ID to get a deterministic but varied offset
      const hash = Math.abs(edgeId.split('').reduce((a, b) => {
        a = ((a << 5) - a) + b.charCodeAt(0);
        return a & a;
      }, 0));
      
      // Get nodes from source and target IDs
      const sourceNode = nodeMap.get(d.from);
      const targetNode = nodeMap.get(d.to);
      
      // Skip if nodes not found
      if (!sourceNode || !targetNode) return;
      
      // Detect if this is a root connection
      const isRootConnection = (d.from === rootSubject || d.to === rootSubject);
      const isFromRoot = d.from === rootSubject;
      
      // Calculate the distance between nodes
      const dx = target.x - source.x;
      const dy = target.y - source.y;
      const distance = Math.sqrt(dx * dx + dy * dy);
      
      // Normalize the direction vector
      const nx = dx / distance;
      const ny = dy / distance;
      
      // Create perpendicular vector for offset
      const px = -ny;
      const py = nx;
      
      if (isRootConnection) {
        // For connections with root
        const t = isFromRoot ? 0.35 : 0.65; // Position along the path
        
        // Calculate base position along the path
        labelX = source.x + dx * t;
        labelY = source.y + dy * t;
        
        // Apply a perpendicular offset based on hash
        const perpOffset = 60 + (hash % 40); // 60-100px perpendicular offset
        labelX += px * perpOffset;
        labelY += py * perpOffset;
      } else {
        // For non-root connections, position at midpoint with perpendicular offset
        labelX = source.x + dx * 0.5;
        labelY = source.y + dy * 0.5;
        
        // Apply larger perpendicular offset based on hash
        const perpOffset = 80 + (hash % 60); // 80-140px perpendicular offset
        
        // Use a deterministic but varied sign for the offset
        const sign = ((hash % 2) * 2 - 1); // Either 1 or -1
        labelX += px * perpOffset * sign;
        labelY += py * perpOffset * sign;
      }
      
      // Get text elements to calculate size
      const textElements = labelEl.selectAll('text.link-label');
      
      if (textElements.size() > 0) {
        let labelWidth = 0;
        let labelHeight = 0;
        
        // Calculate total width and height based on all text elements
        textElements.each(function() {
          try {
            const bbox = this.getBBox();
            labelWidth = Math.max(labelWidth, bbox.width);
            labelHeight += bbox.height;
          } catch (e) {
            console.log("Error getting text bounding box", e);
          }
        });
        
        // Add more padding
        labelWidth += 30;
        labelHeight += 16;
        
        // Update background rectangle size
        labelEl.select('rect.label-bg')
          .attr('width', labelWidth)
          .attr('height', labelHeight)
          .attr('x', -labelWidth / 2)
          .attr('y', -labelHeight / 2);
        
        // Update the text position to match the background
        labelEl.attr('transform', `translate(${labelX},${labelY})`);
        
        // Store the position for use in interactions
        d.labelX = labelX;
        d.labelY = labelY;
      }
    } catch (error) {
      console.error("Error positioning label:", error);
    }
  });
  
  // Helper function to highlight a connection between two nodes
  function highlightConnection(sourceId, targetId) {
    // Find the link data to get its category color
    const linkData = linkElements.filter(l => l.from === sourceId && l.to === targetId).data()[0];
    
    if (!linkData) {
      console.warn(`No link found between ${sourceId} and ${targetId}`);
      return;
    }
    
    // Get the category color
    const categoryColor = categoryColors[linkData.category] || categoryColors["UNKNOWN"];
    
    // Highlight the link with its category color
    linkElements.filter(l => l.from === sourceId && l.to === targetId)
      .style('stroke', categoryColor)
      .style('stroke-width', '4px')
      .attr('marker-end', `url(#arrow-${linkData.category || 'UNKNOWN'})`);
    
    // Highlight source and target nodes with the same category color
    nodeElements.filter(n => n.id === sourceId)
      .select('rect')
      .style('stroke', '#2563EB')  // Source node still uses blue
      .style('stroke-width', '3px');
      
    nodeElements.filter(n => n.id === targetId)
      .select('rect')
      .style('stroke', categoryColor)  // Target node uses category color
      .style('stroke-width', '3px');
    
    // Highlight the label with the category color
    labelElements.filter(l => l.from === sourceId && l.to === targetId)
      .each(function() {
        d3.select(this).select('.label-bg')
          .style('fill', categoryColor);
        d3.select(this).selectAll('.link-label')
          .style('fill', 'white');
      });
  }
  
  // Helper function to highlight all connections to/from a node
  function highlightNodeConnections(nodeId) {
    // Highlight all links connected to this node
    linkElements.each(function(link) {
      const sourceId = link.from;
      const targetId = link.to;
      
      if (sourceId === nodeId || targetId === nodeId) {
        // Highlight this connection
        highlightConnection(sourceId, targetId);
      }
    });
  }
  
  // Helper function to reset all highlights
  function resetHighlights() {
    // Reset node styles
    nodeElements.select('rect')
      .style('stroke', null)
      .style('stroke-width', null)
      .attr('stroke', d => d.id === rootSubject ? '#2563EB' : '#94A3B8')
      .attr('stroke-width', d => d.id === rootSubject ? 3 : 1);
    
    // Reset edge styles - maintain category colors
    linkElements
      .style('stroke', null)
      .style('stroke-width', null)
      .attr('stroke', d => categoryColors[d.category] || categoryColors["UNKNOWN"])
      .attr('stroke-width', 2)
      .attr('marker-end', d => `url(#arrow-${d.category || 'UNKNOWN'})`);
    
    // Reset label styles
    labelElements.select('.label-bg')
      .style('fill', null)
      .attr('fill', '#F3F4F6');
    labelElements.selectAll('.link-label')
      .style('fill', null)
      .attr('fill', '#475569');
  }
  
  // First run the simulation without rendering for many iterations
  // This helps find a better layout before rendering
  let tempSimulation = d3.forceSimulation(nodes)
    .force('link', d3.forceLink()
      .links(edges)
      .id(d => d.id)
      .distance(d => {
        // Vary distance based on connection type
        if (d.from === rootSubject || d.to === rootSubject) {
          return 350; // Root connections get even more space
        }
        return 250; // More space for other connections
      }))
    .force('charge', d3.forceManyBody()
      .strength(d => d.id === rootSubject ? -2500 : -1500)) // Stronger repulsion
    .force('x', d3.forceX(d => {
      if (d.id === rootSubject) return 0;
      if (firstLevelNodeIds.has(d.id)) {
        // Spread first level nodes horizontally
        const index = Array.from(firstLevelNodeIds).indexOf(d.id);
        const angleStep = Math.PI / Math.max(firstLevelNodeIds.size, 1);
        const angle = (index * angleStep) - Math.PI/2;
        return 300 * Math.cos(angle); // Circular arrangement
      }
      return d.x * 0.5; // Weaker horizontal force for other nodes
    }).strength(0.5))
    .force('y', d3.forceY(d => {
      if (d.id === rootSubject) return -height * 0.9; // Keep root very high
      if (firstLevelNodeIds.has(d.id)) {
        // Position first level nodes in a semi-circle below root
        const index = Array.from(firstLevelNodeIds).indexOf(d.id);
        const angleStep = Math.PI / Math.max(firstLevelNodeIds.size, 1);
        const angle = (index * angleStep) - Math.PI/2;
        return -height * 0.5 + 300 * Math.max(0, Math.sin(angle)); // Create arc below root
      }
      return height * 0.2; // Push other nodes down more
    }).strength(0.5)) // Stronger vertical force
    .force('collision', d3.forceCollide()
      .radius(d => {
        // Even larger collision radius to keep nodes well separated
        const nodeWidth = getNodeWidth(d);
        const nodeHeight = getNodeHeight(d);
        
        if (d.id === rootSubject) {
          return Math.sqrt(nodeWidth * nodeHeight) + 180;
        }
        return Math.sqrt(nodeWidth * nodeHeight) + 130;
      })
      .strength(1)) // Full collision strength
    .stop();
  
  // Run the pre-positioning simulation for more iterations
  for (let i = 0; i < 50; i++) {  // Reduced from 150 to 50 iterations
    tempSimulation.tick();
  }
  
  // Now create the actual simulation for rendering
  simulation = d3.forceSimulation(nodes)
    .force('link', d3.forceLink()
      .links(edges)
      .id(d => d.id)
      .distance(d => {
        // Use different distances for different types of connections
        if (d.from === rootSubject || d.to === rootSubject) {
          return forceParams.linkDistance * 12; // Increased from 8 to create more vertical separation
        }
        return forceParams.linkDistance * 6; // Slightly increased for all other connections
      }))
    .force('charge', d3.forceManyBody()
      .strength(d => {
        // Use stronger repulsion for the root
        if (d.id === rootSubject) {
          return forceParams.charge * -15; // Reduced from -20
        }
        // Use node size to scale repulsion
        const nodeSize = Math.sqrt(getNodeWidth(d) * getNodeHeight(d));
        return forceParams.charge * (nodeSize / 150) * -10; // Reduced from -15
      })
      .distanceMin(600) // Reduced from 900
      .distanceMax(8000)) // Reduced from 12000
    .force('x', d3.forceX(d => {
      // Root node stays at center
      if (d.id === rootSubject) return 0;
      
      // First level nodes - spread them horizontally in an arc
      if (firstLevelNodeIds.has(d.id)) {
        const index = Array.from(firstLevelNodeIds).indexOf(d.id);
        const angleStep = Math.PI / Math.max(firstLevelNodeIds.size, 1);
        const angle = (index * angleStep) - Math.PI/2;
        return 350 * Math.cos(angle); // Circular arrangement
      }
      
      // Second level nodes spread wider
      return d.x * 1.2;
    }).strength(d => d.id === rootSubject ? 1 : 0.5)) // Stronger force to maintain structure
    .force('y', d3.forceY(d => {
      // Keep root at top
      if (d.id === rootSubject) return -height * 0.9; // Position root very high
      
      // First level nodes positioned in arc below root
      if (firstLevelNodeIds.has(d.id)) {
        const index = Array.from(firstLevelNodeIds).indexOf(d.id);
        const angleStep = Math.PI / Math.max(firstLevelNodeIds.size, 1);
        const angle = (index * angleStep) - Math.PI/2;
        return -height * 0.5 + 300 * Math.max(0, Math.sin(angle)); // Semi-circular arrangement
      }
      
      // Second level nodes positioned at bottom
      return height * 0.3; // Push other nodes further down
    }).strength(d => d.id === rootSubject ? 1 : 0.6)) // Stronger vertical force
    .force('collision', d3.forceCollide().radius(d => {
      // Use much larger collision radius
      const nodeWidth = getNodeWidth(d);
      const nodeHeight = getNodeHeight(d);
      // Different collision radii based on node type
      if (d.id === rootSubject) {
        return Math.sqrt(nodeWidth * nodeHeight) + 150; // Reduced from 180
      }
      return Math.sqrt(nodeWidth * nodeHeight) + 100; // Reduced from 130
    }).strength(0.8).iterations(2)) // Reduced iterations from 4 to 2
    .alpha(0.5) // Slightly higher alpha for faster convergence
    .alphaDecay(0.015) // Increased from 0.003 for faster convergence
    .velocityDecay(0.3) // Increased from 0.25 for slightly more damping
    .on('tick', ticked)
    .on('end', () => {
      // When the simulation ends, center the graph based on actual content bounds
      centerGraph();
      
      // We'll move the progressive display and failsafe to after centerGraph completes
      // by letting centerGraph call displayNodesProgressively
    });
}

// Function to display nodes progressively after data is fully loaded
function displayNodesProgressively() {
  try {
    const loadingNodesDiv = document.getElementById('loading-nodes');
    if (!loadingNodesDiv) {
      console.warn("Loading nodes div not found");
      return;
    }
    
    loadingNodesDiv.innerHTML = ''; // Clear any existing content
    
    // Check if nodeElements exists - if not, we can't display nodes yet
    if (!nodeElements) {
      console.warn("Node elements not available yet, cannot display nodes progressively");
      return;
    }
    
    // Get root node
    const rootNode = nodeElements.filter(d => d.id === rootSubject).data()[0];
    
    // Find first-level nodes (directly connected to root)
    // Use window.firstLevelNodeIds to ensure we access the global variable
    const firstLevelNodes = nodeElements.filter(d => window.firstLevelNodeIds.has(d.id)).data();
    
    console.log(`Displaying ${firstLevelNodes.length} first-level nodes progressively`);
    
    // Add root node first
    if (rootNode) {
      const rootDiv = document.createElement('div');
      rootDiv.className = 'opacity-0 transition-opacity duration-300 py-1';
      
      // Add the root node ID as the main text
      // const nodeIdSpan = document.createElement('div');
      // nodeIdSpan.className = 'font-bold';
      // nodeIdSpan.textContent = rootNode.id;
      // rootDiv.appendChild(nodeIdSpan);
      
      // Add text indicating this is the root node
      const relationSpan = document.createElement('div');
      relationSpan.className = 'text-sm opacity-80 ml-2';
      rootDiv.appendChild(relationSpan);
      
      loadingNodesDiv.appendChild(rootDiv);
      
      // Trigger fade in for root node
      setTimeout(() => {
        rootDiv.style.opacity = '1';
      }, 150);
    }
    
    // Function to find relationship labels between root and a node
    function getRelationshipLabels(nodeId) {
      const relationships = [];
      
      // Check for edges from root to this node
      window.edges.forEach(edge => {
        if (edge.from === rootSubject && edge.to === nodeId) {
          relationships.push(edge.label || "unlabeled relation");
        } else if (edge.to === rootSubject && edge.from === nodeId) {
          relationships.push(edge.label || "unlabeled relation");
        }
      });
      
      return relationships;
    }
    
    // Add first-level nodes progressively
    let nodeIndex = 0;
    function addNextNode() {
      if (nodeIndex < firstLevelNodes.length) {
        const node = firstLevelNodes[nodeIndex];
        
        // Create element for this node
        const div = document.createElement('div');
        div.className = 'opacity-0 transition-opacity duration-300 py-2';
        
        // Add the node ID as the main text
        const nodeIdSpan = document.createElement('div');
        nodeIdSpan.textContent = node.id;
        div.appendChild(nodeIdSpan);
        
        // Add relationship labels
        const relationships = getRelationshipLabels(node.id);
        if (relationships.length > 0) {
          relationships.forEach(label => {
            const relationSpan = document.createElement('div');
            relationSpan.className = 'text-sm opacity-80 ml-2';
            relationSpan.textContent = label;
            div.appendChild(relationSpan);
          });
        }
        
        // Add to container
        loadingNodesDiv.appendChild(div);
        
        // Trigger fade in and scroll to bottom
        setTimeout(() => {
          div.style.opacity = '1';
          loadingNodesDiv.scrollTop = loadingNodesDiv.scrollHeight;
        }, 50);
        
        // Move to next node
        nodeIndex++;
        
        // Schedule next node with 1 second delay
        setTimeout(addNextNode, 1000);
      }
    }
    
    // Start adding nodes with a short delay
    setTimeout(addNextNode, 500);
  } catch (error) {
    console.error("Error displaying nodes progressively:", error);
  }
}

// Function to center the graph based on its actual rendered bounds
function centerGraph() {
  try {
    // Get the bounding box of the graph content
    const bbox = document.getElementById('graph-content').getBBox();
    console.log("Graph bbox:", bbox);
    
    // Calculate the dimensions of the viewport
    const viewportWidth = width;
    const viewportHeight = height;
    console.log("Viewport dimensions:", viewportWidth, viewportHeight);
    
    // Calculate the center of the graph content with emphasis on the root node
    // For knowledge graphs, we want the root higher in the viewport
    const graphCenterX = bbox.x + bbox.width / 2;
    const graphCenterY = bbox.y + bbox.height * 0.15; // 15% point to shift focus even further upward
    
    // Calculate the translation needed to center the graph
    const translateX = viewportWidth / 2 - graphCenterX;
    const translateY = viewportHeight / 5 - graphCenterY; // Position at 1/5 of the height instead of 1/3
    console.log("Translation:", translateX, translateY);
    
    // Determine appropriate initial scale based on the graph size
    // We want to fit the graph with some margin
    let initialScale = Math.min(
      viewportWidth / (bbox.width * 1.25),  // 25% margin horizontally
      viewportHeight / (bbox.height * 1.25) // 25% margin vertically
    );
    
    // Limit scale to reasonable bounds
    initialScale = Math.min(Math.max(initialScale, 0.15), 0.75);
    console.log("Initial scale:", initialScale);
    
    // Update the zoom transform to center the graph with appropriate scale
    d3.select('#graph').call(
      zoom.transform,
      d3.zoomIdentity
        .translate(translateX, translateY)
        .scale(initialScale)
    );
    
    console.log("Graph centered based on actual bounds");
    
    // Now the nodes are already being displayed progressively before centering
    // so we don't need to call displayNodesProgressively here
    
    // Hide loading overlay and indicators
    document.getElementById('loading').style.display = 'none';
    $('#loading-indicator').hide();
    $('#loading-overlay').fadeOut();
  } catch (error) {
    console.error("Error centering graph:", error);
    
    // Failsafe: Ensure loading overlay is hidden even if there's an error
    document.getElementById('loading').style.display = 'none';
    $('#loading-indicator').hide();
  }
}

// Function for updating element positions on tick
function ticked() {
  try {
    // Keep the root node fixed at the top
    simulation.nodes().forEach(d => {
      if (d.id === rootSubject) {
        d.x = 0;
        d.y = -height * 0.9; // Position root much higher
        d.fx = 0;
        d.fy = -height * 0.9; // Position root much higher
      }
      
      // Keep first level nodes in their semi-circular arrangement
      if (firstLevelNodeIds.has(d.id)) {
        // Limit vertical movement - first level nodes shouldn't go above a certain point
        if (d.y < -height * 0.3) {
          d.y = Math.max(d.y, -height * 0.3);
        }
      }
      
      // Enforce hierarchical layout - non-root nodes should never go above the root
      if (d.id !== rootSubject) {
        // Keep all non-root nodes below the root node by at least some margin
        if (d.y < -height * 0.7) {
          d.y = -height * 0.7;
        }
      }
    });
    
    // Get the bounds of the available canvas area
    const graphWidth = width * 2;  // Make the bounding box larger than the visible area
    const graphHeight = height * 2;
    
    // Add border constraints - keep nodes within bounds
    simulation.nodes().forEach(function(d) {
      // Don't apply to fixed nodes (like the root)
      if (d.fx !== undefined || d.fy !== undefined) return;
      
      // Don't let nodes go too far off-canvas
      const nodeWidth = getNodeWidth(d);
      const nodeHeight = getNodeHeight(d);
      
      // Softer constraints - gradually increase force as nodes approach edges
      const margin = 200; // Increased margin
      
      // X bounds
      const xMin = -graphWidth/2 + nodeWidth/2 + margin;
      const xMax = graphWidth/2 - nodeWidth/2 - margin;
      
      // Y bounds - allow more space at the top for the hierarchical layout
      const yMin = -graphHeight/2 + nodeHeight/2 + margin;
      const yMax = graphHeight/2 - nodeHeight/2 - margin;
      
      if (d.x < xMin) {
        d.x = xMin + (d.x - xMin) * 0.1; // gradual enforcement
        d.vx = Math.abs(d.vx) * 0.5; // dampen velocity and reverse direction
      }
      if (d.x > xMax) {
        d.x = xMax - (xMax - d.x) * 0.1; // gradual enforcement
        d.vx = -Math.abs(d.vx) * 0.5; // dampen velocity and reverse direction
      }
      
      if (d.y < yMin) {
        d.y = yMin + (d.y - yMin) * 0.1; // gradual enforcement
        d.vy = Math.abs(d.vy) * 0.5; // dampen velocity and reverse direction
      }
      if (d.y > yMax) {
        d.y = yMax - (yMax - d.y) * 0.1; // gradual enforcement
        d.vy = -Math.abs(d.vy) * 0.5; // dampen velocity and reverse direction
      }
    });
    
    // Update node positions
    nodeElements.attr('transform', d => `translate(${d.x - getNodeWidth(d) / 2},${d.y - getNodeHeight(d) / 2})`);
    
    // Helper function to get node layer for path generation
    function getNodeLayer(nodeId, edgesList) {
      // Root is always layer 0
      if (nodeId === rootSubject) return 0;
      
      // First level: directly connected to root
      const isConnectedToRoot = edgesList.some(e => 
        (e.from === rootSubject && e.to === nodeId) || 
        (e.to === rootSubject && e.from === nodeId)
      );
      
      if (isConnectedToRoot) return 1;
      
      // Otherwise it's a deeper level
      return 2;
    }
    
    // Update link positions with more advanced path generation
    linkElements.attr('d', function(d) {
      try {
        const sourceId = d.from;
        const targetId = d.to;
        
        // Get source and target nodes from the ID
        const sourceNode = nodeMap.get(sourceId);
        const targetNode = nodeMap.get(targetId);
        
        if (!sourceNode || !targetNode) {
          console.warn(`Missing node data for ${sourceId} or ${targetId}`);
          return '';
        }
        
        // Calculate source and target points
        const sourcePoint = {
          x: sourceNode.x,
          y: sourceNode.y
        };
        
        const targetPoint = {
          x: targetNode.x,
          y: targetNode.y
        };
        
        // Store the source and target points for label positioning
        d.pathPoints = { source: sourcePoint, target: targetPoint };
        
        // Direct line for debugging
        if (window.debugMode) {
        const sourceX = sourceNode.x;
        const sourceY = sourceNode.y;
        const targetX = targetNode.x;
        const targetY = targetNode.y;
          return `M${sourceX},${sourceY} L${targetX},${targetY}`;
        }
        
        // Adjust path drawing based on whether this is a connection from/to root
        const isRootConnection = (sourceId === rootSubject || targetId === rootSubject);
        
        // Check if this is a "Son of" relationship
        const isSonOfRelation = d.label && (d.label.includes("Son of") || d.label.includes("Child of") || d.label.includes("Parent of") || d.label.includes("Father of") || d.label.includes("Mother of"));
        
        // Create path with more segments for hierarchical flow
        let path = '';
        
        // For "Son of" relations, use a more prominent curve
        if (isSonOfRelation) {
          // Calculate midpoint with offset for a nice curve
          const midX = (sourcePoint.x + targetPoint.x) / 2;
          const midY = (sourcePoint.y + targetPoint.y) / 2;
          
          // Calculate a perpendicular vector to the line
          const dx = targetPoint.x - sourcePoint.x;
          const dy = targetPoint.y - sourcePoint.y;
          const dist = Math.sqrt(dx * dx + dy * dy);
          
          // Normalize and get perpendicular vector
          const nx = dx / dist;
          const ny = dy / dist;
          const px = -ny;
          const py = nx;
          
          // Create a large curve for "Son of" relationships
          // The curve should extend away from the direct line to make space for the label
          const curveOffset = dist * 0.3; // 30% of distance as curve height
          
          // Apply the curve offset
          const ctrlX = midX + px * curveOffset;
          const ctrlY = midY + py * curveOffset;
          
          // Use a quadratic curve for "Son of" relationships
          path = `M${sourcePoint.x},${sourcePoint.y} Q${ctrlX},${ctrlY} ${targetPoint.x},${targetPoint.y}`;
          
          // Store control points for label positioning
          d.curveControlPoints = { ctrlX, ctrlY };
        }
        // For hierarchical layout, use different path strategies
        else if (isRootConnection) {
          // For connections involving the root, use more direct paths
          if (sourceId === rootSubject) {
            // Root to other nodes - create more spread out curves
            const controlDistance = Math.abs(targetPoint.x - sourcePoint.x) * 0.3;
            const midY = sourcePoint.y + (targetPoint.y - sourcePoint.y) * 0.4;
            
            // Use bezier curves with control points that spread out more
            path = `M${sourcePoint.x},${sourcePoint.y} 
                    C${sourcePoint.x},${sourcePoint.y + controlDistance} 
                    ${targetPoint.x},${targetPoint.y - controlDistance} 
                    ${targetPoint.x},${targetPoint.y}`;
            
            // Store control points for label positioning
            d.curveControlPoints = { 
              ctrl1X: sourcePoint.x, 
              ctrl1Y: sourcePoint.y + controlDistance,
              ctrl2X: targetPoint.x, 
              ctrl2Y: targetPoint.y - controlDistance 
            };
          } else {
            // Other nodes to root - create more spread out curves going upward
            const controlDistance = Math.abs(sourcePoint.x - targetPoint.x) * 0.3;
            
            // Use bezier curves with control points that spread out more
            path = `M${sourcePoint.x},${sourcePoint.y} 
                    C${sourcePoint.x},${sourcePoint.y - controlDistance} 
                    ${targetPoint.x},${targetPoint.y + controlDistance} 
                    ${targetPoint.x},${targetPoint.y}`;
            
            // Store control points for label positioning
            d.curveControlPoints = { 
              ctrl1X: sourcePoint.x, 
              ctrl1Y: sourcePoint.y - controlDistance,
              ctrl2X: targetPoint.x, 
              ctrl2Y: targetPoint.y + controlDistance 
            };
          }
        } else {
          // For connections between non-root nodes
          // Calculate the "layer" of the node based on its position
          const sourceLayer = getNodeLayer(sourceId, edges);
          const targetLayer = getNodeLayer(targetId, edges);
          
          // Route differently based on whether nodes are on same layer or different layers
          if (Math.abs(sourcePoint.y - targetPoint.y) > Math.abs(sourcePoint.x - targetPoint.x) * 1.2) {
            // More vertical than horizontal - likely across layers
            // Use S-curves for more separation between paths
            const dx = targetPoint.x - sourcePoint.x;
            const dy = targetPoint.y - sourcePoint.y;
            
            // Calculate offset based on the uniqueness of the connection
            const connectionId = sourceId.length + targetId.length + sourcePoint.x;
            const randomOffset = (connectionId % 100) / 100 * 0.4 + 0.3; // 0.3 to 0.7 range
            
            // Create control points for S-curve
            const cp1x = sourcePoint.x + dx * 0.1;
            const cp1y = sourcePoint.y + dy * randomOffset;
            const cp2x = sourcePoint.x + dx * 0.9;
            const cp2y = sourcePoint.y + dy * (1 - randomOffset);
            
          path = `M${sourcePoint.x},${sourcePoint.y} 
                    C${cp1x},${cp1y} ${cp2x},${cp2y} ${targetPoint.x},${targetPoint.y}`;
          } else if (Math.abs(sourceLayer - targetLayer) <= 1) {
            // Nodes are on similar layers - use a curved path
            const midX = (sourcePoint.x + targetPoint.x) / 2;
            // Add some randomness to midY to reduce overlaps
            const midYOffset = (sourceId.length + targetId.length) % 100;
            const midY = (sourcePoint.y + targetPoint.y) / 2 + (midYOffset - 50);
            
            path = `M${sourcePoint.x},${sourcePoint.y} 
                    Q${midX},${midY} ${targetPoint.x},${targetPoint.y}`;
        } else {
            // Significant horizontal distance - use orthogonal routing with randomized midpoints
            const midX = (sourcePoint.x + targetPoint.x) / 2 + 
                      ((sourceId.length * targetId.length) % 100 - 50);
            const yDiff = Math.abs(targetPoint.y - sourcePoint.y);
            const midY1 = sourcePoint.y + (isSourceHigher ? yDiff * 0.25 : -yDiff * 0.25);
            const midY2 = targetPoint.y + (isSourceHigher ? -yDiff * 0.25 : yDiff * 0.25);
            
          path = `M${sourcePoint.x},${sourcePoint.y} 
                    C${sourcePoint.x},${midY1} ${midX},${midY1} ${midX},${(midY1 + midY2) / 2}
                    S${targetPoint.x},${midY2} ${targetPoint.x},${targetPoint.y}`;
          }
        }
        
        // Store the path points for label positioning
        d.pathPoints = {
          source: sourcePoint,
          target: targetPoint,
          isHorizontal: Math.abs(sourcePoint.x - targetPoint.x) > Math.abs(sourcePoint.y - targetPoint.y)
        };
        
        return path;
      } catch (error) {
        console.error("Error generating link path:", error);
        return '';
      }
    });
    
    // Update label positions on the links
    labelElements.each(function(d) {
      try {
        if (!d.pathPoints) {
          return;
        }
        
        const { source, target } = d.pathPoints;
        const labelEl = d3.select(this);
        
        // Get nodes from source and target IDs
        const sourceNode = nodeMap.get(d.from);
        const targetNode = nodeMap.get(d.to);
        
        // Skip if nodes not found
        if (!sourceNode || !targetNode) return;
        
        // Detect if this is a root connection
        const isRootConnection = (d.from === rootSubject || d.to === rootSubject);
        const isFromRoot = d.from === rootSubject;
        
        // Calculate the distance between nodes
        const dx = target.x - source.x;
        const dy = target.y - source.y;
        const distance = Math.sqrt(dx * dx + dy * dy);
        
        // Normalize the direction vector
        const nx = dx / distance;
        const ny = dy / distance;
        
        // Create perpendicular vector for offset
        const px = -ny;
        const py = nx;
        
        // Get actual path element for this edge to find points along the path
        const pathElement = linkElements.filter(e => e.from === d.from && e.to === d.to).node();
        let labelX, labelY;
        
        if (pathElement) {
          try {
            // Get the total length of the path
            const pathLength = pathElement.getTotalLength();
            
            // Position the label at a specific point along the path
            // Root connections might need different positioning
            let pathPosition;
            
            if (isRootConnection) {
              pathPosition = isFromRoot ? 0.4 : 0.6; // Position along the path
            } else {
              pathPosition = 0.5; // Middle of the path for non-root connections
            }
            
            // Get the point at the desired position along the path
            const point = pathElement.getPointAtLength(pathLength * pathPosition);
            labelX = point.x;
            labelY = point.y;
            
            // Create a unique identifier for this edge to ensure consistent offsets
            const edgeId = `${d.from}-${d.to}`;
            // Create a hash from the edge ID to get a deterministic but varied offset
            const hash = Math.abs(edgeId.split('').reduce((a, b) => {
              a = ((a << 5) - a) + b.charCodeAt(0);
              return a & a;
            }, 0));
            
            // For curves, we might need to adjust the perpendicular offset
            // Get points slightly before and after the current point to determine the tangent
            const pointBefore = pathElement.getPointAtLength(Math.max(0, pathLength * pathPosition - 10));
            const pointAfter = pathElement.getPointAtLength(Math.min(pathLength, pathLength * pathPosition + 10));
            
            // Calculate the tangent vector at this point
            const tangentX = pointAfter.x - pointBefore.x;
            const tangentY = pointAfter.y - pointBefore.y;
            const tangentLength = Math.sqrt(tangentX * tangentX + tangentY * tangentY);
            
            // Normalize the tangent vector
            const tnx = tangentX / tangentLength;
            const tny = tangentY / tangentLength;
            
            // Calculate the perpendicular vector to the tangent
            const tpx = -tny;
            const tpy = tnx;
            
            // Apply a small perpendicular offset to ensure text is on the line but visible
            const perpOffset = 15 + (hash % 10); // Smaller offset - just enough to not overlap the line
            
            // Use a deterministic but varied sign for the offset
            const sign = ((hash % 2) * 2 - 1); // Either 1 or -1
            labelX += tpx * perpOffset * sign;
            labelY += tpy * perpOffset * sign;
          } catch (e) {
            console.warn("Error positioning label on path:", e);
            
            // Fallback to simple midpoint positioning
            labelX = source.x + dx * 0.5;
            labelY = source.y + dy * 0.5;
          }
        } else {
          // Fallback if path element not found
          console.warn("Path element not found for label positioning");
          
          // Position at midpoint with offset
          labelX = source.x + dx * 0.5;
          labelY = source.y + dy * 0.5;
        }
        
        // Get text elements to calculate size
        const textElements = labelEl.selectAll('text.link-label');
        
        if (textElements.size() > 0) {
          let labelWidth = 0;
          let labelHeight = 0;
          
          // Calculate total width and height based on all text elements
        textElements.each(function() {
            try {
          const bbox = this.getBBox();
              labelWidth = Math.max(labelWidth, bbox.width);
              labelHeight += bbox.height;
            } catch (e) {
              console.log("Error getting text bounding box", e);
            }
          });
          
          // Add more padding
          labelWidth += 30;
          labelHeight += 16;
          
          // Update background rectangle size
          labelEl.select('rect.label-bg')
            .attr('width', labelWidth)
            .attr('height', labelHeight)
            .attr('x', -labelWidth / 2)
            .attr('y', -labelHeight / 2);
          
          // Update the text position to match the background
          labelEl.attr('transform', `translate(${labelX},${labelY})`);
          
          // Store the position for use in interactions
          d.labelX = labelX;
          d.labelY = labelY;
        }
      } catch (error) {
        console.error("Error positioning label:", error);
      }
    });
  } catch (error) {
    console.error("Error in tick function:", error);
  }
}

// Function to prevent label overlaps with nodes and other labels
function preventLabelOverlaps() {
  try {
    // First collect all node rectangles for overlap checking
    const nodeRects = [];
    nodeElements.each(function(d) {
      // Add extra padding around nodes
      const extraPadding = 40;
      nodeRects.push({
        x: d.x - getNodeWidth(d) / 2 - extraPadding,
        y: d.y - getNodeHeight(d) / 2 - extraPadding,
        width: getNodeWidth(d) + extraPadding * 2,
        height: getNodeHeight(d) + extraPadding * 2,
        id: d.id,
        type: 'node',
        center: { x: d.x, y: d.y }
      });
    });
    
    // Collect all label rectangles
    const labelRects = [];
    labelElements.each(function(d) {
      const labelGroup = d3.select(this);
      const labelBg = labelGroup.select('.label-bg');
      
      // Skip if no background element
      if (labelBg.empty()) return;
      
      // Get the label's bounding box
      const labelBBox = labelBg.node().getBBox();
      if (!labelBBox) return;
      
      // Current label position
      const labelX = d.labelX || 0;
      const labelY = d.labelY || 0;
      
      // Get source and target nodes for this edge
      const sourceNode = nodeMap.get(d.from);
      const targetNode = nodeMap.get(d.to);
      
      if (!sourceNode || !targetNode) return;
      
      labelRects.push({
        x: labelX - labelBBox.width / 2,
        y: labelY - labelBBox.height / 2,
        width: labelBBox.width,
        height: labelBBox.height,
        edge: d,
        group: labelGroup,
        originalX: labelX,
        originalY: labelY,
        type: 'label',
        sourceNode: sourceNode,
        targetNode: targetNode,
        center: { x: labelX, y: labelY }
      });
    });
    
    // Process each label to avoid overlaps
    for (const labelRect of labelRects) {
      let hasOverlap = true;
      let attempts = 0;
      const maxAttempts = 12; // Increased from default
      
      while (hasOverlap && attempts < maxAttempts) {
        hasOverlap = false;
        attempts++;
        
        
        // Check for overlaps with nodes
        for (const nodeRect of nodeRects) {
          if (rectsOverlap(labelRect, nodeRect)) {
            hasOverlap = true;
            
            // Try to move the label away from the node
            repositionLabelAwayFromRect(labelRect, nodeRect);
            break;
          }
        }
        
        // If no node overlaps, check for overlaps with other labels
        if (!hasOverlap) {
          for (let j = 0; j < i; j++) {
            if (rectsOverlap(labelRect, labelRects[j])) {
              hasOverlap = true;
              
              // Try to move the label away from the other label
              repositionLabelAwayFromRect(labelRect, labelRects[j]);
              break;
            }
          }
        }
        
        // If we still have overlaps after several attempts, try a more drastic approach
        if (hasOverlap && attempts >= 5) {
          // Try positioning at different angles around the midpoint between source and target
          const sourceCenter = labelRect.sourceNode;
          const targetCenter = labelRect.targetNode;
          
          if (sourceCenter && targetCenter) {
            const midX = (sourceCenter.x + targetCenter.x) / 2;
            const midY = (sourceCenter.y + targetCenter.y) / 2;
            
            // Calculate distance to place label - increased for more spacing
            const baseDistance = Math.max(labelRect.width, labelRect.height) * 2;
            const distance = baseDistance + (attempts * 20); // Gradually increase distance with each attempt
            
            // Try different angles with slight randomization
            const angleStep = (Math.PI * 2) / maxAttempts;
            const angle = angleStep * attempts + (Math.random() * 0.2 - 0.1);
            
            labelRect.x = midX + Math.cos(angle) * distance - labelRect.width / 2;
            labelRect.y = midY + Math.sin(angle) * distance - labelRect.height / 2;
          }
        }
      }
      
      // Update the label position
      const newX = labelRect.x + labelRect.width/2;
      const newY = labelRect.y + labelRect.height/2;
      
      labelRect.group.attr('transform', `translate(${newX}, ${newY})`);
      
      // Update stored position for future reference
      labelRect.edge.labelX = newX;
      labelRect.edge.labelY = newY;
    }
  } catch (error) {
    console.error("Error in preventLabelOverlaps:", error);
  }
}

// Helper function to check if two rectangles overlap
function rectsOverlap(rect1, rect2) {
  // Add a larger buffer zone to ensure labels don't touch
  const buffer = 35; // Increased from 25
  
  return !(
    rect1.x + rect1.width + buffer < rect2.x ||
    rect2.x + rect2.width + buffer < rect1.x ||
    rect1.y + rect1.height + buffer < rect2.y ||
    rect2.y + rect2.height + buffer < rect1.y
  );
}

// Helper function to reposition a label away from an overlapping rectangle
function repositionLabelAwayFromRect(labelRect, overlapRect) {
  // Calculate centers
  const labelCenterX = labelRect.x + labelRect.width / 2;
  const labelCenterY = labelRect.y + labelRect.height / 2;
  const rectCenterX = overlapRect.x + overlapRect.width / 2;
  const rectCenterY = overlapRect.y + overlapRect.height / 2;
  
  // Calculate direction vector from overlapping rect to label
  const dirX = labelCenterX - rectCenterX;
  const dirY = labelCenterY - rectCenterY;
  
  // Normalize direction vector
  const length = Math.sqrt(dirX * dirX + dirY * dirY);
  const normDirX = length > 0 ? dirX / length : 0;
  const normDirY = length > 0 ? dirY / length : 1; // Default to moving down if centers are the same
  
  // Calculate minimum distance needed to avoid overlap
  const minDistX = (labelRect.width + overlapRect.width) / 2;
  const minDistY = (labelRect.height + overlapRect.height) / 2;
  
  // Calculate the overlap amount
  const overlapX = minDistX - Math.abs(labelCenterX - rectCenterX);
  const overlapY = minDistY - Math.abs(labelCenterY - rectCenterY);
  
  // Add a larger buffer to ensure no overlap
  const buffer = 30; // Increased buffer
  
  // Move in the direction with the least overlap, but with a minimum movement
  const moveDistance = Math.max(Math.min(overlapX, overlapY) + buffer, 40); // Increased minimum distance
  
  if (overlapX < overlapY) {
    // Move horizontally
    labelRect.x += moveDistance * Math.sign(normDirX);
  } else {
    // Move vertically
    labelRect.y += moveDistance * Math.sign(normDirY);
  }
}

// Helper function to calculate the overlap area between two rectangles
function calculateOverlapArea(rect1, rect2) {
  // Calculate the overlap along the x-axis
  const overlapX = Math.max(0, 
    Math.min(rect1.x + rect1.width, rect2.x + rect2.width) - 
    Math.max(rect1.x, rect2.x)
  );
  
  // Calculate the overlap along the y-axis
  const overlapY = Math.max(0, 
    Math.min(rect1.y + rect1.height, rect2.y + rect2.height) - 
    Math.max(rect1.y, rect2.y)
  );
  
  // The overlap area is the product of the x and y overlaps
  return overlapX * overlapY;
}

// Helper function to find intersection point of a line with a rectangle
function findIntersectionPoint(x1, y1, x2, y2, rectX, rectY, rectWidth, rectHeight) {
  // Line equation: y = mx + b
  const dx = x2 - x1;
  const dy = y2 - y1;
  
  // Handle vertical line
  if (Math.abs(dx) < 0.001) {
    // Check if the line intersects the top or bottom of the rectangle
    if (x1 >= rectX && x1 <= rectX + rectWidth) {
      if (y1 < y2) { // Line going down
        return { x: x1, y: rectY };
      } else { // Line going up
        return { x: x1, y: rectY + rectHeight };
      }
    }
    return null;
  }
  
  // Handle horizontal line
  if (Math.abs(dy) < 0.001) {
    // Check if the line intersects the left or right of the rectangle
    if (y1 >= rectY && y1 <= rectY + rectHeight) {
      if (x1 < x2) { // Line going right
        return { x: rectX + rectWidth, y: y1 };
      } else { // Line going left
        return { x: rectX, y: y1 };
      }
    }
    return null;
  }
  
  // Calculate slope and y-intercept
  const m = dy / dx;
  const b = y1 - m * x1;
  
  // Check intersection with each edge of the rectangle
  const intersections = [];
  
  // Top edge: y = rectY
  const topX = (rectY - b) / m;
  if (topX >= rectX && topX <= rectX + rectWidth) {
    intersections.push({ x: topX, y: rectY, dist: Math.hypot(topX - x1, rectY - y1) });
  }
  
  // Bottom edge: y = rectY + rectHeight
  const bottomX = (rectY + rectHeight - b) / m;
  if (bottomX >= rectX && bottomX <= rectX + rectWidth) {
    intersections.push({ x: bottomX, y: rectY + rectHeight, dist: Math.hypot(bottomX - x1, rectY + rectHeight - y1) });
  }
  
  // Left edge: x = rectX
  const leftY = m * rectX + b;
  if (leftY >= rectY && leftY <= rectY + rectHeight) {
    intersections.push({ x: rectX, y: leftY, dist: Math.hypot(rectX - x1, leftY - y1) });
  }
  
  // Right edge: x = rectX + rectWidth
  const rightY = m * (rectX + rectWidth) + b;
  if (rightY >= rectY && rightY <= rectY + rectHeight) {
    intersections.push({ x: rectX + rectWidth, y: rightY, dist: Math.hypot(rectX + rectWidth - x1, rightY - y1) });
  }
  
  // Find the closest intersection point in the direction of the line
  let closestPoint = null;
  let minDist = Infinity;
  
  for (const point of intersections) {
    // Check if the point is in the direction of the line
    const dotProduct = (point.x - x1) * (x2 - x1) + (point.y - y1) * (y2 - y1);
    if (dotProduct > 0) {
      if (point.dist < minDist) {
        minDist = point.dist;
        closestPoint = point;
      }
    }
  }
  
  return closestPoint;
}

// Helper function to get node width
function getNodeWidth(node) {
  // Default width if not calculated yet
  if (!node._width) {
    // Base width on text length
    const textLength = node.id ? node.id.length : 10;
    const bulletInfo = node.bulletInfo || {};
    const bullet1 = bulletInfo.bullet_point1 || '';
    const bullet2 = bulletInfo.bullet_point2 || '';
    
    // Use consistent padding for all nodes
    const padding = 12;
    
    // If there are no bullet points, use a smaller width
    if (bullet1.length === 0 && bullet2.length === 0) {
      node._width = Math.max(textLength * 8 + padding * 2, 120);
      return node._width;
    }
    
    // For nodes with descriptions, calculate width based on content
    // Find the longest line in the bullets
    const longestBullet = bullet1.length > bullet2.length ? bullet1 : bullet2;
    
    // Estimate how many characters we can fit per line
    // Use a smaller character width to fit more text per line
    const charWidth = 6.5; // Pixels per character (reduced to fit more text)
    
    // Calculate a width that will fit approximately 40-50 chars per line
    // This ensures text fills the box better
    const targetCharsPerLine = 45;
    const contentBasedWidth = Math.min(
      Math.max(longestBullet.length, textLength * 1.5) * charWidth + padding * 2,
      targetCharsPerLine * charWidth + padding * 2
    );
    
    node._width = Math.max(contentBasedWidth, 220);
  }
  return node._width;
}

// Helper function to get node height
function getNodeHeight(node) {
  // Default height if not calculated yet
  if (!node._height) {
    // Base height on number of text lines
    const bulletInfo = node.bulletInfo || {};
    const bullet1 = bulletInfo.bullet_point1 || '';
    const bullet2 = bulletInfo.bullet_point2 || '';
    
    // Use consistent padding (12px) for top, sides, and bottom
    const padding = 12;
    
    // If there are no bullet points, use a smaller height but maintain padding
    if (bullet1.length === 0 && bullet2.length === 0) {
      node._height = padding + 18 + padding; // Top padding + title height + bottom padding
      return node._height;
    }
    
    // Get node width to calculate how many lines we'll need
    const nodeWidth = getNodeWidth(node);
    const charsPerLine = Math.floor((nodeWidth - padding * 2) / 6.5); // Characters per line
    
    // Count lines after wrapping
    const wrappedBullet1 = wrapText(bullet1, charsPerLine);
    const wrappedBullet2 = wrapText(bullet2, charsPerLine);
    
    const bulletLines1 = wrappedBullet1.length;
    const bulletLines2 = wrappedBullet2.length;
    
    // Calculate height based on number of lines
    // Top padding + title height + bullet points + bottom padding
    node._height = padding + 18 + (bulletLines1 + bulletLines2) * 18 + padding;
    
    // Add small padding between bullet points if both exist
    if (bulletLines1 > 0 && bulletLines2 > 0) {
      node._height += 5;
    }
    
    // Ensure minimum height
    node._height = Math.max(node._height, 60);
  }
  return node._height;
}

// Helper function to wrap text to a specified width
function wrapText(text, maxChars) {
  if (!text) return [];
  
  const words = text.split(' ');
  const lines = [];
  let currentLine = '';
  
  words.forEach(word => {
    // If the word itself is longer than maxChars, we need to break it
    if (word.length > maxChars) {
      // First add any current line content
      if (currentLine) {
        lines.push(currentLine);
        currentLine = '';
      }
      
      // Then break the long word
      let i = 0;
      while (i < word.length) {
        lines.push(word.substr(i, maxChars));
        i += maxChars;
      }
      return;
    }
    
    const testLine = currentLine ? `${currentLine} ${word}` : word;
    if (testLine.length <= maxChars) {
      currentLine = testLine;
    } else {
      lines.push(currentLine);
      currentLine = word;
    }
  });
  
  if (currentLine) {
    lines.push(currentLine);
  }
  
  return lines;
}

// Function to zoom to fit all nodes
function zoomToFitAll() {
  // Get the bounds of all nodes
  let minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity;
  
  nodeElements.each(function(d) {
    const width = getNodeWidth(d);
    const height = getNodeHeight(d);
    
    minX = Math.min(minX, d.x - width/2);
    minY = Math.min(minY, d.y - height/2);
    maxX = Math.max(maxX, d.x + width/2);
    maxY = Math.max(maxY, d.y + height/2);
  });
  
  // Add padding
  const padding = 50;
  minX -= padding;
  minY -= padding;
  maxX += padding;
  maxY += padding;
  
  // Calculate the scale and translate to fit all nodes
  const graphWidth = maxX - minX;
  const graphHeight = maxY - minY;
  const scale = Math.min(width / graphWidth, height / graphHeight, 1);
  
  const translateX = width/2 - (minX + maxX)/2 * scale;
  const translateY = height/2 - (minY + maxY)/2 * scale;
  
  // Apply the zoom transform
  d3.select('#graph').transition().duration(750).call(
    zoom.transform,
    d3.zoomIdentity.translate(translateX, translateY).scale(scale)
  );
}

// Handle zoom controls
document.getElementById('zoomIn').onclick = () => {
  d3.select('#graph').transition().duration(300).call(zoom.scaleBy, 1.3);
};

document.getElementById('zoomOut').onclick = () => {
  d3.select('#graph').transition().duration(300).call(zoom.scaleBy, 0.7);
};

document.getElementById('zoomFit').onclick = zoomToFitAll;

// Remove drag functions since we disabled node dragging

function buildGraph(subject, filterKeywords = []) {
  // Update page title with subject name
  try {
    const subjectName = nameFromEntityId(subject);
    document.title = `${subjectName} - People Relations`;
    $('#graphTitle').text(`${subjectName} - Relationship Graph`);
  } catch (e) {
    document.title = "People Relations";
    $('#graphTitle').text("Relationship Graph");
  }
  
  // Update loading overlay text
  $('#loading-text').text('Preparing graph data...');
  $('#loading').show(); // Ensure loading overlay is visible
  
  // Show loading indicator
  $('#loading-indicator').show();
  
  // Start fetch process
  const relationsZip = `../data/${subject}.zip`;
  // ... existing code ...
}

// Helper function to determine the "layer" of a node based on distance from root
function getNodeLayer(nodeId, edgesParam) {
  // Use provided edges parameter or fall back to global edges
  const edgesToUse = edgesParam || window.edges;
  
  if (nodeId === rootSubject) {
    return 0; // Root node is layer 0
  }
  
  // Check if directly connected to root
  const isDirectlyConnected = edgesToUse.some(
    edge => (edge.from === rootSubject && edge.to === nodeId) || 
            (edge.to === rootSubject && edge.from === nodeId)
  );
  
  if (isDirectlyConnected) {
    return 1; // Directly connected to root is layer 1
  }
  
  // Get nodes directly connected to root
  const connectedToRoot = edgesToUse.filter(
    edge => edge.from === rootSubject || edge.to === rootSubject
  ).map(edge => edge.from === rootSubject ? edge.to : edge.from);
  
  // Check if connected to a node that's connected to root
  const isTwoStepsAway = edgesToUse.some(
    edge => (connectedToRoot.includes(edge.from) && edge.to === nodeId) || 
            (connectedToRoot.includes(edge.to) && edge.from === nodeId)
  );
  
  if (isTwoStepsAway) {
    return 2; // Two steps away from root is layer 2
  }
  
  return 3; // Everything else is layer 3 or beyond
}


</script>
</body>
</html>

    </main>
    
<div class="flex justify-center">
  <div class="m-4 border-2 border-green p-4 rounded text-sm bg-white text-center">
    <strong class="block mb-1">Help us build more tools like this.</strong> If you like the work you're doing, <a href="/donate" class="text-green font-semibold">we'd love your support</a>.
  </div>
</div>

<footer class="border-t border-gray-200 mt-4 py-4 flex justify-center">
  <div class="flex items-center text-black/75 gap-2">
    <span class="text-xs">Hosted by</span>
    
    <a href="https://americancloud.com?utm_source=datarepublican" target="_blank">
    <svg height="24" viewBox="0 0 2647 500" fill="none" xmlns="http://www.w3.org/2000/svg">
      <g clip-path="url(#clip0_14_2)">
      <path d="M729.213 166.336C731.437 160.415 734.694 156.68 738.945 155.209C743.195 153.739 748.041 152.984 753.403 152.984C758.766 152.984 763.731 153.819 768.299 155.488C772.827 157.156 776.124 160.852 778.19 166.614L842.142 334.34C843.611 338.234 843.055 341.453 840.473 343.956C837.892 346.46 833.8 347.731 828.239 347.731C823.234 347.731 819.024 346.936 815.568 345.347C812.152 343.757 809.848 341.413 808.736 338.274L794.277 299.889H712.252L698.071 338.274C696.959 341.413 694.694 343.797 691.239 345.347C687.823 346.936 683.493 347.731 678.289 347.731C672.728 347.731 668.637 346.499 666.055 343.956C663.473 341.453 662.917 338.274 664.387 334.34L729.173 166.336H729.213ZM784.267 272.034L753.681 189.979L722.818 272.034H784.267Z" fill="#1E1C39"/>
      <path d="M1074.55 336.843C1074.55 344.075 1069.35 347.691 1058.98 347.691C1048.62 347.691 1043.69 344.075 1043.69 336.843V264.245C1043.69 252.762 1041.07 244.775 1035.75 240.324C1030.46 235.874 1024.11 233.649 1016.68 233.649C1010.92 233.649 1005.95 234.96 1001.78 237.543C997.613 240.126 994.197 243.702 991.496 248.232C988.795 252.762 986.848 258.245 985.657 264.643C984.465 271.04 983.829 278.113 983.829 285.941V336.843C983.829 344.075 978.626 347.691 968.259 347.691C957.891 347.691 952.966 344.075 952.966 336.843V264.245C952.966 252.762 950.344 244.775 945.021 240.324C939.738 235.874 933.383 233.649 925.955 233.649C920.195 233.649 915.23 234.96 911.059 237.543C906.888 240.126 903.472 243.702 900.771 248.232C898.07 252.762 896.124 258.245 894.932 264.643C893.74 271.04 893.105 278.113 893.105 285.941V336.843C893.105 344.075 887.901 347.691 877.534 347.691C867.167 347.691 862.241 344.075 862.241 336.843V219.463C862.241 215.37 863.353 212.31 865.578 210.284C867.802 208.257 871.417 207.224 876.422 207.224C880.672 207.224 883.969 208.257 886.273 210.284C888.577 212.31 890.205 215.29 891.119 219.185L892.231 231.423C896.481 223.834 902.241 217.873 909.47 213.622C916.7 209.37 925.955 207.224 937.276 207.224C948.596 207.224 957.057 209.529 964.405 214.178C971.714 218.827 976.958 226.218 980.135 236.43C984.386 227.331 990.344 220.218 997.931 215.012C1005.52 209.807 1015.53 207.224 1027.96 207.224C1042.62 207.224 1054.06 211.595 1062.32 220.297C1070.58 228.999 1074.59 243.106 1074.43 262.577V336.843H1074.55Z" fill="#1E1C39"/>
      <path d="M1130.44 285.107C1131.36 296.432 1134.81 305.651 1140.73 312.803C1146.65 319.956 1155.67 323.492 1167.7 323.492C1174.37 323.492 1180.29 322.181 1185.5 319.598C1190.7 317.015 1194.87 312.843 1198.01 307.081C1199.48 305.054 1201.62 303.425 1204.4 302.233C1207.19 301.041 1211 300.405 1215.8 300.405C1220.61 300.405 1224.46 301.558 1226.77 303.862C1229.07 306.167 1229.51 309.386 1228.04 313.479C1223.59 325.36 1216 334.022 1205.24 339.506C1194.47 344.989 1181.88 347.731 1167.42 347.731C1157.41 347.731 1148.2 346.34 1139.74 343.559C1131.32 340.777 1123.97 336.525 1117.77 330.764C1111.57 325.002 1106.73 317.73 1103.31 308.909C1099.9 300.087 1098.19 289.677 1098.19 277.597C1098.19 265.517 1099.94 255.066 1103.47 246.165C1107.01 237.265 1111.81 229.953 1117.93 224.191C1124.05 218.43 1131.32 214.178 1139.74 211.396C1148.16 208.615 1157.41 207.224 1167.42 207.224C1176.52 207.224 1184.98 208.456 1192.89 210.959C1200.75 213.463 1207.7 217.118 1213.74 221.966C1219.78 226.774 1224.54 232.735 1228.08 239.768C1231.61 246.801 1233.56 254.987 1233.92 264.245V272.59C1233.92 276.285 1232.65 279.305 1230.18 281.65C1227.68 283.955 1224.58 285.107 1220.85 285.107H1130.48H1130.44ZM1201.62 263.967C1201.62 253.596 1198.33 245.609 1191.77 240.046C1185.18 234.483 1176.88 231.702 1166.87 231.702C1156.1 231.702 1147.88 234.682 1142.12 240.602C1136.36 246.523 1132.75 254.311 1131.28 263.967H1201.62Z" fill="#1E1C39"/>
      <path d="M1332.86 238.934C1327.3 238.377 1321.86 238.973 1316.58 240.761C1311.3 242.51 1306.57 245.212 1302.4 248.828C1298.23 252.444 1294.89 256.974 1292.39 262.457C1289.89 267.941 1288.65 274.299 1288.65 281.531V336.883C1288.65 344.115 1283.45 347.731 1273.08 347.731C1262.72 347.731 1257.79 344.115 1257.79 336.883V219.503C1257.79 215.41 1258.9 212.35 1261.13 210.323C1263.35 208.297 1266.97 207.264 1271.97 207.264C1275.86 207.264 1278.96 208.217 1281.27 210.165C1283.57 212.112 1285.48 215.211 1286.99 219.503L1288.38 235.079C1293.18 226.933 1299.22 220.258 1306.45 215.052C1313.68 209.847 1322.78 207.264 1333.7 207.264C1337.59 207.264 1340.57 208.575 1342.6 211.158C1344.62 213.741 1345.66 218.191 1345.66 224.509C1345.66 235.278 1341.4 240.086 1332.86 238.973V238.934Z" fill="#1E1C39"/>
      <path d="M1364.56 176.071V163.832C1364.56 156.6 1369.85 152.984 1380.41 152.984C1390.98 152.984 1396.54 156.6 1396.54 163.832V176.071C1396.54 183.303 1391.18 186.919 1380.41 186.919C1369.65 186.919 1364.56 183.303 1364.56 176.071ZM1395.98 218.072V336.843C1395.98 344.075 1390.78 347.691 1380.41 347.691C1370.04 347.691 1365.12 344.075 1365.12 336.843V218.072C1365.12 210.84 1370.2 207.224 1380.41 207.224C1390.62 207.224 1395.98 210.84 1395.98 218.072Z" fill="#1E1C39"/>
      <path d="M1550.86 310.697C1546.05 323.492 1538.15 332.87 1527.22 338.79C1516.3 344.751 1503.39 347.691 1488.57 347.691C1478.56 347.691 1469.31 346.301 1460.77 343.519C1452.23 340.737 1444.88 336.486 1438.64 330.724C1432.45 324.962 1427.56 317.691 1424.03 308.869C1420.49 300.048 1418.74 289.637 1418.74 277.557C1418.74 265.477 1420.49 255.027 1424.03 246.126C1427.56 237.225 1432.41 229.913 1438.64 224.152C1444.84 218.39 1452.23 214.138 1460.77 211.357C1469.31 208.575 1478.56 207.184 1488.57 207.184C1503.59 207.184 1516.62 210.085 1527.66 215.926C1538.7 221.767 1546.45 231.185 1550.9 244.179C1552.37 248.271 1551.73 251.49 1548.95 253.914C1546.17 256.338 1542.2 257.53 1537 257.53C1527.74 257.53 1521.62 254.669 1518.64 248.907C1516.06 242.987 1512.01 238.735 1506.57 236.231C1501.09 233.728 1495.13 232.456 1488.61 232.456C1483.41 232.456 1478.56 233.291 1474 234.96C1469.47 236.629 1465.54 239.291 1462.16 242.907C1458.82 246.523 1456.2 251.212 1454.21 256.974C1452.27 262.735 1451.32 269.57 1451.32 277.557C1451.32 285.544 1452.31 292.379 1454.21 298.14C1456.16 303.902 1458.82 308.591 1462.16 312.207C1465.5 315.823 1469.43 318.445 1474 320.154C1478.52 321.823 1483.41 322.658 1488.61 322.658C1495.29 322.658 1501.29 321.307 1506.57 318.644C1511.85 315.942 1515.98 311.73 1518.92 305.968C1520.79 302.988 1523.29 300.803 1526.43 299.412C1529.57 298.021 1533.18 297.346 1537.27 297.346C1542.64 297.346 1546.65 298.538 1549.23 300.962C1551.81 303.385 1552.37 306.604 1550.9 310.697H1550.86Z" fill="#1E1C39"/>
      <path d="M1665.46 326.274C1661.01 332.751 1654.73 337.956 1646.67 341.85C1638.6 345.744 1628.36 347.691 1615.92 347.691C1610.16 347.691 1604.48 347.175 1598.84 346.142C1593.2 345.108 1588.12 343.241 1583.67 340.459C1579.22 337.678 1575.6 333.823 1572.82 328.896C1570.04 323.969 1568.65 317.611 1568.65 309.823C1568.65 300.564 1570.88 293.372 1575.33 288.286C1579.78 283.2 1585.38 279.305 1592.17 276.603C1598.92 273.901 1606.31 272.073 1614.29 271.04C1622.28 270.007 1629.71 268.934 1636.7 267.822C1643.65 266.709 1649.53 265.199 1654.37 263.212C1659.18 261.265 1661.8 257.967 1662.16 253.358C1661.6 245.371 1659.02 239.569 1654.37 235.953C1649.73 232.337 1642.69 230.509 1633.24 230.509C1624.54 230.509 1618.03 231.701 1613.78 234.125C1609.53 236.549 1606.63 240.324 1605.16 245.53C1604.24 248.669 1602.18 250.894 1599.04 252.205C1595.9 253.517 1592.65 254.152 1589.31 254.152C1578.39 254.152 1573.74 249.781 1575.41 241.079C1577.43 231.066 1583.07 222.92 1592.25 216.602C1601.42 210.284 1615.09 207.145 1633.28 207.145C1652.94 207.145 1667.76 210.84 1677.77 218.271C1687.78 225.701 1692.78 237.384 1692.78 253.318V307.28C1692.78 312.286 1693.3 315.743 1694.33 317.73C1695.37 319.677 1697.15 320.631 1699.78 320.631H1700.61C1703.03 320.631 1704.86 321.664 1706.17 323.691C1707.48 325.717 1708.12 328.618 1708.12 332.313C1707.92 337.32 1706.57 340.777 1704.1 342.764C1701.6 344.711 1697.39 345.665 1691.43 345.665H1689.77C1676.42 345.665 1668.36 339.188 1665.57 326.194L1665.46 326.274ZM1601.23 308.472C1601.23 313.836 1603.17 318.167 1607.06 321.426C1610.96 324.684 1616.99 326.274 1625.14 326.274C1631.25 326.274 1636.62 325.28 1641.26 323.373C1645.91 321.426 1649.73 318.684 1652.82 315.147C1655.88 311.611 1658.19 307.558 1659.78 302.909C1661.36 298.26 1662.16 293.173 1662.16 287.61V279.822C1658.62 282.047 1654.69 283.716 1650.32 284.829C1645.95 285.941 1641.54 286.816 1637.09 287.491C1632.65 288.127 1628.24 288.842 1623.87 289.557C1619.5 290.312 1615.64 291.385 1612.31 292.776C1608.97 294.167 1606.27 296.074 1604.24 298.458C1602.22 300.882 1601.19 304.22 1601.19 308.472H1601.23Z" fill="#1E1C39"/>
      <path d="M1725.79 217.516C1725.79 213.622 1726.91 210.641 1729.13 208.615C1731.35 206.588 1734.97 205.555 1739.97 205.555C1744.22 205.555 1747.48 206.588 1749.71 208.615C1751.93 210.641 1753.68 213.701 1754.99 217.794L1756.1 230.589C1760.55 222.801 1766.67 216.681 1774.45 212.231C1782.24 207.78 1792.25 205.555 1804.48 205.555C1820.05 205.555 1832.29 209.926 1841.18 218.628C1850.08 227.331 1854.45 241.437 1854.25 260.908V334.896C1854.25 342.128 1849.05 345.744 1838.68 345.744C1828.31 345.744 1823.11 342.128 1823.11 334.896V262.298C1823.11 256.537 1822.32 251.729 1820.73 247.834C1819.14 243.94 1816.95 240.801 1814.17 238.377C1811.39 235.953 1808.22 234.245 1804.6 233.211C1800.99 232.178 1797.13 231.702 1793.04 231.702C1786.57 231.702 1781.01 233.013 1776.36 235.596C1771.71 238.178 1767.98 241.794 1765.08 246.444C1762.22 251.093 1760.07 256.616 1758.68 263.014C1757.29 269.411 1756.62 276.405 1756.62 283.994V334.896C1756.62 342.128 1751.41 345.744 1741.05 345.744C1730.68 345.744 1725.75 342.128 1725.75 334.896V217.516H1725.79Z" fill="#1E1C39"/>
      <path d="M2121.18 293.451C2118.4 302.71 2114.51 310.737 2109.51 317.532C2104.5 324.287 2098.58 329.929 2091.71 334.38C2084.84 338.83 2077.21 342.168 2068.75 344.393C2060.33 346.618 2051.39 347.731 2041.9 347.731C2029.11 347.731 2017.35 345.824 2006.59 342.009C1995.82 338.194 1986.53 332.313 1978.62 324.326C1970.76 316.34 1964.56 306.247 1960.11 294.008C1955.66 281.769 1953.44 267.226 1953.44 250.338C1953.44 233.45 1955.66 218.906 1960.11 206.668C1964.56 194.429 1970.72 184.336 1978.62 176.349C1986.49 168.362 1995.82 162.481 2006.59 158.666C2017.35 154.852 2029.11 152.944 2041.9 152.944C2061.16 152.944 2077.93 157.474 2092.11 166.574C2106.29 175.674 2116.26 189.74 2122.02 208.853C2123.13 212.549 2122.77 215.449 2120.91 217.476C2119.04 219.503 2115.98 220.536 2111.73 220.536C2108.39 220.536 2105.53 219.94 2103.11 218.708C2100.69 217.516 2099.02 215.608 2098.11 213.026C2093.3 199.674 2085.87 189.78 2075.86 183.382C2065.85 176.985 2054.45 173.766 2041.66 173.766C2032.96 173.766 2024.66 175.197 2016.75 178.097C2008.89 180.958 2002.02 185.449 1996.18 191.568C1990.34 197.687 1985.69 205.555 1982.28 215.211C1978.86 224.867 1977.11 236.549 1977.11 250.258C1977.11 263.967 1978.82 275.411 1982.28 285.186C1985.69 294.922 1990.34 302.869 1996.18 308.949C2002.02 315.068 2008.89 319.558 2016.75 322.419C2024.62 325.28 2032.92 326.75 2041.66 326.75C2053.89 326.75 2065.02 323.73 2075.03 317.691C2085.04 311.651 2092.46 302.154 2097.27 289.16C2098.18 286.577 2099.85 284.67 2102.28 283.438C2104.7 282.246 2107.56 281.61 2110.9 281.61C2115.15 281.61 2118.2 282.643 2120.07 284.67C2121.94 286.696 2122.3 289.597 2121.18 293.293V293.451Z" fill="#1E1C39"/>
      <path d="M2174.29 340.459C2174.29 342.883 2173.3 344.671 2171.35 345.903C2169.41 347.095 2166.86 347.731 2163.73 347.731C2160.59 347.731 2158.09 347.135 2156.22 345.903C2154.35 344.711 2153.44 342.883 2153.44 340.459V160.216C2153.44 157.792 2154.35 156.004 2156.22 154.772C2158.09 153.58 2160.59 152.944 2163.73 152.944C2166.86 152.944 2169.45 153.54 2171.35 154.772C2173.3 155.964 2174.29 157.792 2174.29 160.216V340.459Z" fill="#1E1C39"/>
      <path d="M2203.49 278.153C2203.49 266.113 2205.16 255.702 2208.49 247C2211.83 238.298 2216.48 231.066 2222.39 225.304C2228.31 219.542 2235.38 215.33 2243.53 212.628C2251.67 209.926 2260.57 208.615 2270.22 208.615C2279.87 208.615 2288.77 209.966 2296.91 212.628C2305.06 215.33 2312.13 219.542 2318.04 225.304C2323.96 231.066 2328.61 238.298 2331.95 247C2335.28 255.702 2336.95 266.113 2336.95 278.153C2336.95 290.193 2335.28 300.604 2331.95 309.306C2328.61 318.008 2323.96 325.24 2318.04 331.002C2312.13 336.764 2305.06 340.976 2296.91 343.678C2288.77 346.38 2279.87 347.691 2270.22 347.691C2260.57 347.691 2251.67 346.34 2243.53 343.678C2235.38 340.976 2228.31 336.764 2222.39 331.002C2216.48 325.24 2211.83 318.008 2208.49 309.306C2205.16 300.604 2203.49 290.193 2203.49 278.153ZM2225.73 278.153C2225.73 287.253 2226.84 295.041 2229.07 301.518C2231.29 307.995 2234.39 313.359 2238.4 317.492C2242.37 321.664 2247.1 324.724 2252.58 326.671C2258.07 328.618 2263.94 329.611 2270.26 329.611C2276.58 329.611 2282.69 328.618 2288.06 326.671C2293.42 324.724 2298.1 321.664 2302.12 317.492C2306.09 313.32 2309.19 307.995 2311.45 301.518C2313.68 295.041 2314.79 287.253 2314.79 278.153C2314.79 269.053 2313.68 261.265 2311.45 254.788C2309.23 248.311 2306.13 242.947 2302.12 238.775C2298.14 234.602 2293.46 231.543 2288.06 229.595C2282.69 227.648 2276.73 226.695 2270.26 226.695C2263.78 226.695 2258.07 227.688 2252.58 229.595C2247.1 231.543 2242.37 234.602 2238.4 238.775C2234.43 242.947 2231.29 248.271 2229.07 254.788C2226.84 261.265 2225.73 269.053 2225.73 278.153Z" fill="#1E1C39"/>
      <path d="M2366.15 215.847C2366.15 213.423 2367.14 211.635 2369.09 210.403C2371.03 209.211 2373.58 208.575 2376.71 208.575C2379.85 208.575 2382.35 209.171 2384.22 210.403C2386.09 211.595 2387 213.423 2387 215.847V292.895C2387 300.127 2387.99 306.127 2389.94 310.816C2391.89 315.545 2394.43 319.28 2397.57 322.101C2400.71 324.883 2404.48 326.83 2408.85 327.942C2413.22 329.055 2417.71 329.611 2422.31 329.611C2430.3 329.611 2437.01 327.942 2442.49 324.605C2447.97 321.267 2452.42 316.777 2455.84 311.134C2459.26 305.492 2461.76 298.895 2463.35 291.385C2464.94 283.875 2465.69 275.928 2465.69 267.623V215.887C2465.69 213.463 2466.68 211.674 2468.63 210.443C2470.58 209.211 2473.12 208.615 2476.26 208.615C2479.39 208.615 2481.9 209.211 2483.76 210.443C2485.63 211.635 2486.54 213.463 2486.54 215.887V338.552C2486.54 341.334 2485.87 343.559 2484.48 345.228C2483.09 346.897 2480.9 347.731 2477.93 347.731C2474.95 347.731 2472.6 346.897 2470.85 345.228C2469.11 343.559 2468.11 341.334 2467.95 338.552L2466.56 319.638C2462.12 328.539 2455.8 335.453 2447.66 340.34C2439.51 345.267 2428.75 347.731 2415.4 347.731C2399.83 347.731 2387.68 343.4 2378.98 334.777C2370.28 326.154 2365.99 312.207 2366.19 292.935V215.887L2366.15 215.847Z" fill="#1E1C39"/>
      <path d="M2627 338.512L2625.61 324.048C2615.8 339.824 2599.95 347.691 2578.06 347.691C2568.97 347.691 2560.63 346.34 2553.04 343.678C2545.45 341.016 2538.86 336.764 2533.3 331.002C2527.74 325.24 2523.45 318.008 2520.35 309.306C2517.29 300.604 2515.78 290.193 2515.78 278.153C2515.78 266.113 2517.29 255.702 2520.35 247C2523.41 238.298 2527.74 231.066 2533.3 225.304C2538.86 219.542 2545.45 215.33 2553.04 212.628C2560.63 209.926 2568.97 208.615 2578.06 208.615C2588.63 208.615 2597.89 210.482 2605.87 214.178C2613.85 217.873 2620.33 223.715 2625.33 231.702V160.216C2625.33 157.792 2626.25 156.004 2628.11 154.772C2629.98 153.58 2632.48 152.944 2635.62 152.944C2638.76 152.944 2641.34 153.54 2643.25 154.772C2645.19 155.964 2646.19 157.792 2646.19 160.216V338.512C2646.19 341.294 2645.47 343.519 2644.08 345.188C2642.69 346.857 2640.43 347.691 2637.25 347.691C2634.07 347.691 2631.69 346.857 2630.02 345.188C2628.35 343.519 2627.32 341.294 2626.96 338.512H2627ZM2538.02 278.153C2538.02 287.253 2539.14 295.041 2541.36 301.518C2543.59 307.995 2546.68 313.359 2550.7 317.492C2554.67 321.664 2559.39 324.724 2564.88 326.671C2570.36 328.618 2576.24 329.611 2582.55 329.611C2593.32 329.611 2602.49 326.909 2610.08 321.545C2617.67 316.181 2622.79 307.359 2625.37 295.12V261.464C2622.79 249.225 2617.67 240.364 2610.08 234.92C2602.49 229.437 2593.28 226.695 2582.55 226.695C2576.24 226.695 2570.36 227.688 2564.88 229.595C2559.39 231.543 2554.67 234.602 2550.7 238.775C2546.72 242.947 2543.59 248.271 2541.36 254.788C2539.14 261.265 2538.02 269.053 2538.02 278.153Z" fill="#1E1C39"/>
      <path d="M497.238 444.449C496.721 446.316 496.165 448.184 495.529 450.012C485.242 479.178 457.476 500 424.864 500H74.9551C42.3038 500 14.5383 479.139 4.29007 450.012C3.65452 448.184 3.05869 446.356 2.58203 444.449H497.238Z" fill="#1E1C39"/>
      <path d="M499.78 333.307H0V388.898H499.78V333.307Z" fill="#1E1C39"/>
      <path d="M2.58203 444.449H497.238C496.721 446.316 496.165 448.184 495.529 450.012C485.242 479.178 457.476 500 424.864 500H74.9551C42.3038 500 14.5383 479.139 4.29007 450.012C3.65452 448.184 3.05869 446.356 2.58203 444.449Z" fill="#1E1C39"/>
      <path d="M499.78 166.653V111.102H249.89V55.5511H497.198C496.681 53.6835 496.125 51.8159 495.49 49.9881C485.202 20.8615 457.436 0 424.825 0H74.955C40.2779 0 11.1221 23.5635 2.58192 55.5511C0.873879 61.75 0 68.2667 0 74.9821V277.756H499.78V222.205H249.89V166.653H499.78ZM211.399 149.328C210.843 156.64 208.539 163.475 204.964 169.435C198.649 179.925 188.321 187.714 176.126 190.654C172.671 191.449 169.056 191.926 165.362 191.926H69.8706C66.7723 191.926 63.7932 191.449 60.973 190.654C50.6056 187.594 42.7407 179.409 39.7218 169.435C37.7754 163.157 37.8152 156.123 40.3573 149.328C40.556 148.812 40.7546 148.335 40.9929 147.818C45.3623 137.765 54.538 130.732 65.3424 129.182C65.4218 128.825 65.5012 128.467 65.541 128.149C67.1298 120.559 70.109 113.765 74.1209 108.043C81.9063 96.9959 93.664 89.605 106.415 86.8235C113.922 85.1943 121.708 85.1546 129.294 86.8235C138.43 88.8898 147.288 93.4197 154.836 100.771C168.42 97.6317 181.727 100.771 191.975 108.043C199.006 113.049 204.647 119.963 208.023 128.149C210.287 133.513 211.519 139.474 211.519 145.752C211.519 146.984 211.479 148.176 211.399 149.368V149.328Z" fill="#1E1C39"/>
      <path d="M170.565 121.831C171.519 122.467 172.472 123.182 173.306 123.977C172.432 123.182 171.519 122.467 170.565 121.831ZM157.775 117.341C157.775 117.341 158.013 117.341 158.132 117.341C158.013 117.341 157.894 117.341 157.775 117.341ZM154.637 117.261C155.709 117.261 156.742 117.261 157.775 117.341C157.06 117.301 156.345 117.222 155.63 117.222C155.312 117.222 154.955 117.222 154.637 117.261Z" fill="white"/>
      <path d="M195.113 145.752C195.113 146.785 195.034 147.739 194.955 148.812C194.279 155.17 191.697 161.011 187.407 165.7C183.515 170.031 178.47 173.051 172.949 174.481C170.486 175.157 167.983 175.475 165.402 175.475H69.95C63.8726 175.475 58.9868 172.415 56.5241 167.09C54.2599 162.243 54.4983 156.56 57.0802 152.229C57.9143 150.878 58.9471 149.686 60.1785 148.693C61.6085 147.54 63.3165 146.666 65.3026 145.991C66.812 145.514 68.4009 145.275 69.9898 145.275C71.9361 145.275 73.8825 145.633 75.7891 146.308C78.8874 147.421 81.946 149.408 85.0443 152.229C86.3551 153.461 87.944 154.335 89.6521 154.733C90.6054 154.971 91.519 155.13 92.4723 155.13C93.4256 155.13 94.3789 154.971 95.2925 154.733C97.3184 154.256 99.1853 153.143 100.576 151.593C100.695 151.434 100.854 151.276 100.973 151.117C104.627 146.626 104.27 139.99 100.019 136.017C94.9351 131.328 89.2946 127.791 83.376 125.685C85.3224 120.48 88.3015 115.95 92.3134 112.135C99.1058 105.738 108.44 102.082 117.934 102.082C127.427 102.082 136.206 105.619 142.959 112.135C143.594 112.771 144.27 113.447 144.985 114.241C147.09 116.586 150.109 117.937 153.207 117.937C154.319 117.937 155.392 117.778 156.464 117.42C159.404 116.467 162.422 116.03 165.441 116.03C171.439 116.03 177.239 117.897 182.085 121.195C185.779 123.699 188.877 127.036 191.181 131.05C193.763 135.461 195.153 140.586 195.153 145.792L195.113 145.752Z" fill="#1E1C39"/>
      </g>
      <defs>
      <clipPath id="clip0_14_2">
      <rect width="2646.19" height="500" fill="white"/>
      </clipPath>
      </defs>
      </svg>
      </a>
    </div>
  </footer>
  </div>
</body>
</html>
